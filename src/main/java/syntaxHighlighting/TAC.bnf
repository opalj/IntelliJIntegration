{
  parserClass="syntaxHighlighting.TAC_parser"
  parserUtilClass="syntaxHighlighting.TAC_parserParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="TAC"
  psiImplClassSuffix="Impl"
  psiPackage="syntaxHighlighting"
  psiImplPackage="syntaxHighlighting.psi.impl"

  elementTypeHolderClass="syntaxHighlighting.TAC_elementTypeHolder"
  elementTypeClass="syntaxHighlighting.psi.TAC_elementType"
  tokenTypeClass="syntaxHighlighting.psi.TAC_tokenType"

  psiImplUtilClass="syntaxHighlighting.psi.impl.TACPsiImplUtil"

  tokens=[
    CRLF='regexp:\R'
    WHITE_SPACE='regexp:\s+'
    STRING="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    COMMENT='regexp://.*'
    BLOCK_COMMENT="regexp:/\*[^\*/]*\*/"
    NUMBER ='regexp:(-)?[0-9]+'
    //JAVA="regexp:(([A-Za-z])*\.)+([A-Za-z])*(\{(.)*\})?"
    KEYWORDS="regexp:new|goto|if|else|throw|throws|catch|caught|return"
    MODIFIER="regexp:public|private|protected|default|static|final|abstract|synchronized|native|strictfp|volatile|transient"
    CLASS="class";
    EXTENDS="extends";
    IMPLEMENTS="implemenmts";
    THROW="throw";
    THROWS="throws";
    VOID="void";
    THIS="this";
    //JAVA_TYPE="regexp:(([A-Za-z])*\.)+[A-Z-a-z]*"
    LEVEL="regexp:lv+([A-Za-z0-9])*"
    COMMA=","
    DOT="."
    COLON=":"
    SEMICOLON=";"
    AT="@"
    R_ARROW="=>"
    L_ARROW="<="
    L_DOUBLE_LACE_BRACE="«"
    R_DOUBLE_LACE_BRACE="»"
    L_LACE_BRACE="<"
    R_LACE_BRACE=">"
    R_BRACKET=")"
    L_BRACKET="("
    L_SQUARE_BRACKET="["
    R_SQUARE_BRACKET="]"
    L_CURVED_BRACKET="{"
    R_CURVED_BRACKET="}"
    PLUS="+"
    MINUS="-"
    CONSTMETHODNAMES = "regexp:<(cl)?init>"
    NEW_LINE="regexp:\n"
    EQ="="
    UEQ="!="
    JAVA_TYPE="regexp:((([A-Za-z])([A-Za-z0-9])*)\.)+(([A-Za-z])([A-Za-z0-9])*)"
    STRINGVAR = "regexp:[a-zA-Z$_][a-zA-Z0-9$_]*"
    ]

}

tacFile ::= item_*

// private item_ ::= (property|COMMENT|CRLF)
//private item_ ::= (property|COMMENT|CRLF|WHITE_SPACE|STRING|NUMBER|KEYWORDS)
private item_ ::= (JMethodHead|Type|COMMENT|CRLF|WHITE_SPACE|STRING|NUMBER|KEYWORDS|MODIFIER | BLOCK_COMMENT|EXTENDS|IMPLEMENTS|CLASS|THROW|THROWS|VOID|THIS|LEVEL|COMMA|DOT|SEMICOLON|COLON|AT|R_ARROW|L_ARROW|L_LACE_BRACE|R_LACE_BRACE|R_BRACKET|L_BRACKET|L_SQUARE_BRACKET|R_SQUARE_BRACKET|L_CURVED_BRACKET|R_CURVED_BRACKET|CONSTMETHODNAMES|NEW_LINE|EQ|UEQ|STRINGVAR|L_DOUBLE_LACE_BRACE|R_DOUBLE_LACE_BRACE|PLUS|MINUS)

Type ::= (JType | STRINGVAR | NUMBER)('[]')*

JMethodHead ::= JModifier BLOCK_COMMENT* JReturnValue BLOCK_COMMENT* JMethodName BLOCK_COMMENT* L_BRACKET (STRINGVAR | BLOCK_COMMENT | COMMA | JAVA_TYPE)* R_BRACKET BLOCK_COMMENT* (L_DOUBLE_LACE_BRACE (STRINGVAR | COMMA | BLOCK_COMMENT | JAVA_TYPE)* R_DOUBLE_LACE_BRACE)? BLOCK_COMMENT* COMMENT?{mixin="syntaxHighlighting.psi.impl.TAC_namedElementImpl"
                                                                                                                                                                                                                                                                                                                                                            implements="syntaxHighlighting.TAC_namedElement"
                                                                                                                                                                                                                                                                                                                                   methods=[getName setName getPresentation navigate getNameIdentifier ]}
JReturnValue ::= (VOID | JType | KEYWORDS | STRINGVAR)

JMethodName ::= ((L_LACE_BRACE STRINGVAR R_LACE_BRACE) | Type)

JModifier ::= MODIFIER*

JType ::= JAVA_TYPE  {mixin="syntaxHighlighting.psi.impl.TAC_namedElementImpl"
                                                          implements="syntaxHighlighting.TAC_namedElement"
                                                          methods=[getJavaTypeString getName setName getNameIdentifier getReferences]}

//JType ::= ((STRINGVAR | THIS) DOT)*(STRINGVAR | THIS)  {mixin="syntaxHighlighting.psi.impl.TAC_namedElementImpl"
  //                                     implements="syntaxHighlighting.TAC_namedElement"
    //                                   methods=[getJavaType getName setName getNameIdentifier getReferences]}

//property ::= (KEY? SEPARATOR VALUE?) | KEY {mixin="syntaxHighlighting.psi.impl.TAC_namedElementImpl"
//  implements="syntaxHighlighting.TAC_namedElement" methods=[getKey getValue getName setName getNameIdentifier getPresentation]}
