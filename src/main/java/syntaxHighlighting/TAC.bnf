{
  parserClass="syntaxHighlighting.TAC_parser"
  parserUtilClass="syntaxHighlighting.TAC_parserParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="TAC"
  psiImplClassSuffix="Impl"
  psiPackage="syntaxHighlighting"
  psiImplPackage="syntaxHighlighting.psi.impl"

  elementTypeHolderClass="syntaxHighlighting.TAC_elementTypeHolder"
  elementTypeClass="syntaxHighlighting.psi.TAC_elementType"
  tokenTypeClass="syntaxHighlighting.psi.TAC_tokenType"

  psiImplUtilClass="syntaxHighlighting.psi.impl.TACPsiImplUtil"

  tokens=[
    CRLF='regexp:\R'
    WHITE_SPACE='regexp:\s+'
    STRING="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    COMMENT='regexp://.*'
    BLOCK_COMMENT="regexp:/\*[^\*/]*\*/"
    NUMBER ='regexp:(-)?[0-9]+'
    //JAVA="regexp:(([A-Za-z])*\.)+([A-Za-z])*(\{(.)*\})?"
    KEYWORDS="regexp:new|goto|if|else|throw|throws|catch|caught|return"
    MODIFIER="regexp:public|private|protected|default|static|final|abstract|synchronized|native|strictfp|volatile|transient"
    PRIMITIVETYPE="regexp:boolean|byte|char|short|int|long|float|double"
    CLASS="class";
    EXTENDS="extends";
    IMPLEMENTS="implemenmts";
    THROW="throw";
    THROWS="throws";
    VOID="void";
    THIS="this";
    //JAVA_TYPE="regexp:(([A-Za-z])*\.)+[A-Z-a-z]*"
    LEVEL="regexp:lv+([A-Za-z0-9])*"
    CONSTMETHODNAMES = "regexp:<(cl)?init>"
    COMMA=","
    DOT="."
    COLON=":"
    SEMICOLON=";"
    AT="@"
    R_ARROW="=>"
    L_ARROW="<="
    L_DOUBLE_LACE_BRACE="«"
    R_DOUBLE_LACE_BRACE="»"
    L_LACE_BRACE="<"
    R_LACE_BRACE=">"
    R_BRACKET=")"
    L_BRACKET="("
    L_SQUARE_BRACKET="["
    R_SQUARE_BRACKET="]"
    L_CURVED_BRACKET="{"
    R_CURVED_BRACKET="}"
    PLUS="+"
    MINUS="-"
    CONSTMETHODNAMES = "regexp:<(cl)?init>"
    NEW_LINE="regexp:\n"
    EQ="="
    UEQ="!="
    FIELDS="Fields"

    JAVA_TYPE="regexp:((([A-Za-z])([A-Za-z0-9])*)\.)+(([A-Za-z])([A-Za-z0-9])*)"
    STRINGVAR = "regexp:[a-zA-Z$_][a-zA-Z0-9$_]*"
    ]

}

tacFile ::= item_*

private item_ ::= ClassHead FieldsDeclaration Methods MethodDeclaration*

ClassHead ::= ModifierV? ("@"?)(class|enum|interface) BLOCK_COMMENT* JType (extends JType)? (implements (JType(",")?)+)?

// generic stuff

ModifierV ::= MODIFIER*

Type ::= (LambdaType | JType | PRIMITIVETYPE | VOID)('[]')*
/*JType ::= (STRINGVAR'.')*STRINGVAR  {mixin="JavaByteCodeLanguage.autoGenerated.psi.impl.JavaByteCodeNamedElementImpl"
                    implements="JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeNamedElement"
                    methods=[getJavaType getName setName getNameIdentifier getReferences]} */
JType ::= JAVA_TYPE  {mixin="syntaxHighlighting.psi.impl.TAC_namedElementImpl"
                                                          implements="syntaxHighlighting.TAC_namedElement"
                                                          methods=[getJavaTypeString getName setName getNameIdentifier getReferences]}

LambdaType ::= (STRINGVAR'.')*STRINGVAR lambdaParams STRINGVAR ":" NUMBER STRINGVAR
lambdaParams ::= ('('( ("]")* STRINGVAR ':'?)*')')

// fields

FieldsDeclaration ::= Fields (ModifierV? BLOCK_COMMENT* Type DefMethodName)*

// methods

MethodDeclaration ::= MethodHead LBRACKET InstructionHead InstructionBody* RBRACKET
            {mixin="syntaxHighlighting.psi.impl.TAC_namedElementImpl"
                implements="syntaxHighlighting.TAC_namedElement"
                methods=[getName setName getNameIdentifier getPresentation navigate]}

MethodHead ::= ModifierV? BLOCK_COMMENT* Type MethodName ("«" (STRINGVAR ","?)* "»")? // JAVA
                    {mixin="syntaxHighlighting.psi.impl.TAC_namedElementImpl"
                             implements="syntaxHighlighting.TAC_namedElement"
                             methods=[getStringVar getName setName getNameIdentifier getReferences]}
//MethodName ::= ((L_LACE_BRACE STRINGVAR R_LACE_BRACE) | Type)

MethodName ::=  ('<init>'|'<clinit>'|DefMethodName) params
DefMethodName ::= STRINGVAR {mixin="syntaxHighlighting.psi.impl.TAC_namedElementImpl"
                             implements="syntaxHighlighting.TAC_namedElement"
                             methods=[getStringVar getName setName getNameIdentifier getReferences]}
params ::= ('('(Type ','?)*')')?

// instructions (part of method body)

private InstructionHead ::= PC Line Instruction
private InstructionBody ::= NUMBER COLON Instr
// TODO {recoverWhile=recoverTillNextInstr}
Instr ::= ((MNEMONIC|LOAD_INSTR) (JType ":" Type                            // put someFQN : someFQN
                                    | "("((JavaOP|NUMBER|STRING)','?)*")"   // LoadString("someString") or ALOAD(5) or ...
                                    | JavaOP)?) //| (PUT_GET_INSTR Type)    // INVOKEVIRTUAL(byte[] { java.lang.Object clone() })
Instr ::= (LEVEL | STRINGVAR | Type | PRIMITIVETYPE | KEYWORDS) (EQ (LEVEL | STRINGVAR | Type | PRIMITIVETYPE | KEYWORDS))?
JavaOP ::= "lvIndex=" NUMBER|((Type|STRINGVAR)('{'Type MethodName'}')?)+
