/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package syntaxHighlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static syntaxHighlighting.TAC_elementTypeHolder.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>TAC.flex</tt>
 */
public class TACLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0, 0
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
          "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
          "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
          "\11\0\1\3\4\2\22\0\1\3\1\65\1\6\1\0\1\44\2\0\1\4\1\57\1\56\1\10\1\64\1\47"+
                  "\1\11\1\43\1\7\12\12\1\50\1\51\1\41\1\53\1\42\1\0\1\52\32\40\1\60\1\5\1\61"+
                  "\1\0\1\44\1\0\1\30\1\33\1\27\1\35\1\14\1\22\1\16\1\25\1\21\2\40\1\23\1\46"+
                  "\1\13\1\17\1\32\1\40\1\26\1\24\1\20\1\31\1\34\1\15\1\45\1\36\1\37\1\62\1\0"+
                  "\1\63\7\0\1\1\45\0\1\54\17\0\1\55\154\0\2\1\26\0");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\1\0\1\1\1\2\1\3\3\1\1\4\1\5\17\6"+
                  "\1\7\1\10\1\11\1\6\1\12\1\13\1\14\1\15"+
                  "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
                  "\1\26\1\27\1\1\1\0\1\30\3\0\1\31\1\0"+
                  "\2\6\1\0\5\6\1\32\2\6\1\33\12\6\2\0"+
                  "\1\34\1\35\1\36\1\0\1\6\1\37\26\6\2\0"+
                  "\1\40\2\6\1\41\16\6\1\42\2\6\1\0\2\6"+
                  "\1\43\2\6\1\44\4\6\1\45\6\6\1\0\1\6"+
                  "\1\46\10\6\1\47\1\50\13\6\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\66\0\66\0\154\0\242\0\330\0\u010e\0\u0144"+
                  "\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
                  "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
                  "\0\u04a4\0\66\0\66\0\u04da\0\66\0\66\0\66\0\66"+
                  "\0\u0510\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
                  "\0\66\0\66\0\u0546\0\242\0\66\0\u057c\0\330\0\u05b2"+
                  "\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762"+
                  "\0\u0798\0\u07ce\0\u01e6\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc"+
                  "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
                  "\0\u0ac2\0\u0af8\0\66\0\66\0\66\0\u0b2e\0\u0b64\0\u0b9a"+
                  "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
                  "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa"+
                  "\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa"+
                  "\0\66\0\u10e0\0\u1116\0\u01e6\0\u114c\0\u1182\0\u11b8\0\u11ee"+
                  "\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e"+
                  "\0\u13d4\0\u140a\0\u01e6\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518"+
                  "\0\u154e\0\u1584\0\u15ba\0\u01e6\0\u15f0\0\u1626\0\u165c\0\u1692"+
                  "\0\u01e6\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c"+
                  "\0\u1842\0\u01e6\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986"+
                  "\0\u19bc\0\u19f2\0\66\0\u01e6\0\u1a28\0\u1a5e\0\u1a94\0\u1aca"+
                  "\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u01e6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\2\1\3\2\4\1\5\1\2\1\6\1\7\1\2"+
                  "\1\10\1\11\1\12\1\13\1\14\1\15\1\14\1\16"+
                  "\1\17\1\20\1\21\1\22\1\14\1\23\1\24\1\25"+
                  "\1\14\1\26\1\14\1\27\1\30\3\14\1\31\1\32"+
                  "\1\33\1\34\2\14\1\35\1\36\1\37\1\40\1\41"+
                  "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
                  "\1\52\1\53\70\0\2\4\62\0\4\54\1\55\1\56"+
                  "\60\54\5\57\1\60\1\55\57\57\7\0\1\61\1\62"+
                  "\67\0\1\11\65\0\2\14\1\63\13\14\1\64\10\14"+
                  "\2\0\1\65\1\34\2\14\31\0\11\14\1\66\15\14"+
                  "\2\0\1\65\1\34\1\67\1\14\31\0\27\14\2\0"+
                  "\1\65\1\34\2\14\31\0\5\14\1\70\21\14\2\0"+
                  "\1\65\1\34\2\14\31\0\13\14\1\71\1\72\12\14"+
                  "\2\0\1\65\1\34\2\14\31\0\10\14\1\73\16\14"+
                  "\2\0\1\65\1\34\1\14\1\74\31\0\7\14\1\75"+
                  "\17\14\2\0\1\65\1\34\2\14\31\0\22\14\1\76"+
                  "\4\14\2\0\1\65\1\34\2\14\31\0\6\14\1\77"+
                  "\15\14\1\100\2\14\2\0\1\65\1\34\2\14\31\0"+
                  "\2\14\1\101\24\14\2\0\1\65\1\34\2\14\31\0"+
                  "\11\14\1\102\4\14\1\103\10\14\2\0\1\65\1\34"+
                  "\2\14\31\0\21\14\1\104\5\14\2\0\1\65\1\34"+
                  "\2\14\31\0\14\14\1\105\2\14\1\106\7\14\2\0"+
                  "\1\65\1\34\2\14\31\0\5\14\1\107\21\14\2\0"+
                  "\1\65\1\34\2\14\31\0\2\14\1\110\24\14\2\0"+
                  "\1\65\1\34\2\14\40\0\1\111\5\0\1\112\23\0"+
                  "\1\113\24\0\27\34\3\0\3\34\61\0\1\114\76\0"+
                  "\1\115\12\0\1\54\2\0\63\54\1\57\2\0\63\57"+
                  "\1\61\2\0\63\61\7\62\1\0\1\116\55\62\12\0"+
                  "\3\14\1\73\23\14\2\0\1\65\1\34\2\14\31\0"+
                  "\6\14\1\117\20\14\2\0\1\65\1\34\2\14\32\0"+
                  "\26\120\4\0\2\120\31\0\12\14\1\121\14\14\2\0"+
                  "\1\65\1\34\2\14\31\0\6\14\1\122\20\14\2\0"+
                  "\1\65\1\34\2\14\31\0\6\14\1\123\20\14\2\0"+
                  "\1\65\1\34\2\14\31\0\7\14\1\124\4\14\1\125"+
                  "\12\14\2\0\1\65\1\34\2\14\31\0\16\14\1\126"+
                  "\10\14\2\0\1\65\1\34\2\14\31\0\20\14\1\127"+
                  "\6\14\2\0\1\65\1\34\2\14\31\0\1\14\1\130"+
                  "\25\14\2\0\1\65\1\34\2\14\31\0\27\76\2\0"+
                  "\1\65\1\34\2\76\31\0\14\14\1\131\1\14\1\132"+
                  "\10\14\2\0\1\65\1\34\2\14\31\0\1\14\1\133"+
                  "\25\14\2\0\1\65\1\34\2\14\31\0\6\14\1\134"+
                  "\20\14\2\0\1\65\1\34\2\14\31\0\16\14\1\135"+
                  "\10\14\2\0\1\65\1\34\2\14\31\0\6\14\1\136"+
                  "\10\14\1\137\7\14\2\0\1\65\1\34\2\14\31\0"+
                  "\12\14\1\140\14\14\2\0\1\65\1\34\2\14\31\0"+
                  "\5\14\1\141\1\14\1\142\17\14\2\0\1\65\1\34"+
                  "\2\14\31\0\21\14\1\143\5\14\2\0\1\65\1\34"+
                  "\2\14\31\0\7\14\1\144\1\14\1\145\15\14\2\0"+
                  "\1\65\1\34\2\14\31\0\10\14\1\146\16\14\2\0"+
                  "\1\65\1\34\2\14\32\0\1\147\75\0\1\150\51\0"+
                  "\1\151\70\0\7\14\1\152\17\14\2\0\1\65\1\34"+
                  "\2\14\31\0\27\120\2\0\1\65\1\0\2\120\31\0"+
                  "\2\14\1\73\24\14\2\0\1\65\1\34\2\14\31\0"+
                  "\2\14\1\153\24\14\2\0\1\65\1\34\2\14\31\0"+
                  "\5\14\1\73\21\14\2\0\1\65\1\34\2\14\31\0"+
                  "\12\14\1\154\14\14\2\0\1\65\1\34\2\14\31\0"+
                  "\5\14\1\155\21\14\2\0\1\65\1\34\2\14\31\0"+
                  "\1\14\1\156\25\14\2\0\1\65\1\34\2\14\31\0"+
                  "\11\14\1\157\15\14\2\0\1\65\1\34\2\14\31\0"+
                  "\16\14\1\160\10\14\2\0\1\65\1\34\2\14\31\0"+
                  "\7\14\1\161\17\14\2\0\1\65\1\34\2\14\31\0"+
                  "\6\14\1\162\20\14\2\0\1\65\1\34\2\14\31\0"+
                  "\15\14\1\163\11\14\2\0\1\65\1\34\2\14\31\0"+
                  "\17\14\1\164\7\14\2\0\1\65\1\34\2\14\31\0"+
                  "\12\14\1\165\14\14\2\0\1\65\1\34\2\14\31\0"+
                  "\15\14\1\166\11\14\2\0\1\65\1\34\2\14\31\0"+
                  "\4\14\1\167\22\14\2\0\1\65\1\34\2\14\31\0"+
                  "\6\14\1\170\20\14\2\0\1\65\1\34\2\14\31\0"+
                  "\6\14\1\171\20\14\2\0\1\65\1\34\2\14\31\0"+
                  "\22\14\1\172\4\14\2\0\1\65\1\34\2\14\31\0"+
                  "\11\14\1\162\15\14\2\0\1\65\1\34\2\14\31\0"+
                  "\23\14\1\173\3\14\2\0\1\65\1\34\2\14\31\0"+
                  "\16\14\1\174\10\14\2\0\1\65\1\34\2\14\31\0"+
                  "\16\14\1\175\10\14\2\0\1\65\1\34\2\14\40\0"+
                  "\1\176\65\0\1\111\56\0\22\14\1\177\4\14\2\0"+
                  "\1\65\1\34\2\14\31\0\1\14\1\200\25\14\2\0"+
                  "\1\65\1\34\2\14\31\0\3\14\1\201\23\14\2\0"+
                  "\1\65\1\34\2\14\31\0\12\14\1\202\14\14\2\0"+
                  "\1\65\1\34\2\14\31\0\2\14\1\203\24\14\2\0"+
                  "\1\65\1\34\2\14\31\0\11\14\1\204\15\14\2\0"+
                  "\1\65\1\34\2\14\31\0\15\14\1\205\11\14\2\0"+
                  "\1\65\1\34\2\14\31\0\7\14\1\206\17\14\2\0"+
                  "\1\65\1\34\2\14\31\0\13\14\1\207\13\14\2\0"+
                  "\1\65\1\34\2\14\31\0\14\14\1\210\12\14\2\0"+
                  "\1\65\1\34\2\14\31\0\12\14\1\211\14\14\2\0"+
                  "\1\65\1\34\2\14\31\0\13\14\1\73\13\14\2\0"+
                  "\1\65\1\34\2\14\31\0\13\14\1\212\13\14\2\0"+
                  "\1\65\1\34\2\14\31\0\14\14\1\213\12\14\2\0"+
                  "\1\65\1\34\2\14\31\0\2\14\1\214\24\14\2\0"+
                  "\1\65\1\34\2\14\31\0\16\14\1\215\10\14\2\0"+
                  "\1\65\1\34\2\14\31\0\6\14\1\216\20\14\2\0"+
                  "\1\65\1\34\2\14\31\0\17\14\1\217\7\14\2\0"+
                  "\1\65\1\34\2\14\37\0\1\220\57\0\2\14\1\204"+
                  "\24\14\2\0\1\65\1\34\2\14\31\0\23\14\1\221"+
                  "\3\14\2\0\1\65\1\34\2\14\31\0\12\14\1\222"+
                  "\14\14\2\0\1\65\1\34\2\14\31\0\7\14\1\223"+
                  "\17\14\2\0\1\65\1\34\2\14\31\0\27\14\2\0"+
                  "\1\65\1\34\1\14\1\224\31\0\6\14\1\225\20\14"+
                  "\2\0\1\65\1\34\2\14\31\0\15\14\1\204\11\14"+
                  "\2\0\1\65\1\34\2\14\31\0\14\14\1\226\12\14"+
                  "\2\0\1\65\1\34\2\14\31\0\1\14\1\73\25\14"+
                  "\2\0\1\65\1\34\2\14\31\0\6\14\1\73\20\14"+
                  "\2\0\1\65\1\34\2\14\31\0\16\14\1\227\10\14"+
                  "\2\0\1\65\1\34\2\14\31\0\15\14\1\230\11\14"+
                  "\2\0\1\65\1\34\2\14\31\0\6\14\1\177\20\14"+
                  "\2\0\1\65\1\34\2\14\31\0\7\14\1\231\17\14"+
                  "\2\0\1\65\1\34\2\14\31\0\11\14\1\232\15\14"+
                  "\2\0\1\65\1\34\2\14\61\0\1\233\35\0\12\14"+
                  "\1\234\14\14\2\0\1\65\1\34\2\14\31\0\2\14"+
                  "\1\235\24\14\2\0\1\65\1\34\2\14\31\0\2\14"+
                  "\1\236\24\14\2\0\1\65\1\34\2\14\31\0\10\14"+
                  "\1\237\16\14\2\0\1\65\1\34\2\14\31\0\5\14"+
                  "\1\240\21\14\2\0\1\65\1\34\2\14\31\0\15\14"+
                  "\1\232\11\14\2\0\1\65\1\34\2\14\31\0\6\14"+
                  "\1\241\20\14\2\0\1\65\1\34\2\14\31\0\11\14"+
                  "\1\177\15\14\2\0\1\65\1\34\2\14\31\0\6\14"+
                  "\1\204\20\14\2\0\1\65\1\34\2\14\31\0\1\14"+
                  "\1\232\25\14\2\0\1\65\1\34\2\14\31\0\1\14"+
                  "\1\242\25\14\2\0\1\65\1\34\2\14\31\0\20\14"+
                  "\1\204\6\14\2\0\1\65\1\34\2\14\31\0\1\14"+
                  "\1\243\25\14\2\0\1\65\1\34\2\14\31\0\2\14"+
                  "\1\244\24\14\2\0\1\65\1\34\2\14\31\0\27\14"+
                  "\2\0\1\65\1\34\1\14\1\245\31\0\7\14\1\246"+
                  "\17\14\2\0\1\65\1\34\2\14\31\0\23\14\1\204"+
                  "\3\14\2\0\1\65\1\34\2\14\31\0\6\14\1\247"+
                  "\20\14\2\0\1\65\1\34\2\14\31\0\25\14\1\241"+
                  "\1\14\2\0\1\65\1\34\2\14\31\0\12\14\1\250"+
                  "\14\14\2\0\1\65\1\34\2\14\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7290];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\1\0\2\11\26\1\2\11\1\1\4\11\1\1\11\11"+
                  "\1\1\1\0\1\11\3\0\1\1\1\0\2\1\1\0"+
                  "\23\1\2\0\3\11\1\0\30\1\2\0\1\11\24\1"+
                  "\1\0\21\1\1\0\12\1\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public TACLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TACLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
          { return BAD_CHARACTER;
          }
          // fall through
          case 42: break;
          case 2:
          { return CRLF;
          }
          // fall through
          case 43: break;
          case 3:
          { return WHITE_SPACE;
          }
          // fall through
          case 44: break;
          case 4:
          { return MINUS;
          }
          // fall through
          case 45: break;
          case 5:
          { return NUMBER;
          }
          // fall through
          case 46: break;
          case 6:
          { return STRINGVAR;
          }
          // fall through
          case 47: break;
          case 7:
          { return L_LACE_BRACE;
          }
          // fall through
          case 48: break;
          case 8:
          { return R_LACE_BRACE;
          }
          // fall through
          case 49: break;
          case 9:
          { return DOT;
          }
          // fall through
          case 50: break;
          case 10:
          { return COMMA;
          }
          // fall through
          case 51: break;
          case 11:
          { return COLON;
          }
          // fall through
          case 52: break;
          case 12:
          { return SEMICOLON;
          }
          // fall through
          case 53: break;
          case 13:
          { return AT;
          }
          // fall through
          case 54: break;
          case 14:
          { return EQ;
          }
          // fall through
          case 55: break;
          case 15:
          { return L_DOUBLE_LACE_BRACE;
          }
          // fall through
          case 56: break;
          case 16:
          { return R_DOUBLE_LACE_BRACE;
          }
          // fall through
          case 57: break;
          case 17:
          { return R_BRACKET;
          }
          // fall through
          case 58: break;
          case 18:
          { return L_BRACKET;
          }
          // fall through
          case 59: break;
          case 19:
          { return L_SQUARE_BRACKET;
          }
          // fall through
          case 60: break;
          case 20:
          { return R_SQUARE_BRACKET;
          }
          // fall through
          case 61: break;
          case 21:
          { return L_CURVED_BRACKET;
          }
          // fall through
          case 62: break;
          case 22:
          { return R_CURVED_BRACKET;
          }
          // fall through
          case 63: break;
          case 23:
          { return PLUS;
          }
          // fall through
          case 64: break;
          case 24:
          { return STRING;
          }
          // fall through
          case 65: break;
          case 25:
          { return COMMENT;
          }
          // fall through
          case 66: break;
          case 26:
          { return KEYWORDS;
          }
          // fall through
          case 67: break;
          case 27:
          { return LEVEL;
          }
          // fall through
          case 68: break;
          case 28:
          { return L_ARROW;
          }
          // fall through
          case 69: break;
          case 29:
          { return R_ARROW;
          }
          // fall through
          case 70: break;
          case 30:
          { return UEQ;
          }
          // fall through
          case 71: break;
          case 31:
          { return JAVA_TYPE;
          }
          // fall through
          case 72: break;
          case 32:
          { return BLOCK_COMMENT;
          }
          // fall through
          case 73: break;
          case 33:
          { return THIS;
          }
          // fall through
          case 74: break;
          case 34:
          { return VOID;
          }
          // fall through
          case 75: break;
          case 35:
          { return THROW;
          }
          // fall through
          case 76: break;
          case 36:
          { return MODIFIER;
          }
          // fall through
          case 77: break;
          case 37:
          { return CLASS;
          }
          // fall through
          case 78: break;
          case 38:
          { return THROWS;
          }
          // fall through
          case 79: break;
          case 39:
          { return CONSTMETHODNAMES;
          }
          // fall through
          case 80: break;
          case 40:
          { return EXTENDS;
          }
          // fall through
          case 81: break;
          case 41:
          { return IMPLEMENTS;
          }
          // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
