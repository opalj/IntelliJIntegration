/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package syntaxHighlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import syntaxHighlighting.TAC_elementTypeHolder;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>TAC.flex</tt>
 */
class TACLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\3\1\22\0\1\3\1\63\1\6\1\0\1\65\2\0\1\4\1\54\1\53\1\10\1\44\1"+
    "\41\1\11\1\64\1\7\12\12\1\42\1\43\1\50\1\46\1\47\1\0\1\45\32\40\1\55\1\5\1"+
    "\56\1\0\1\65\1\0\1\30\1\33\1\27\1\35\1\14\1\22\1\16\1\25\1\21\2\40\1\23\1"+
    "\62\1\13\1\17\1\32\1\40\1\26\1\24\1\20\1\31\1\34\1\15\1\61\1\36\1\37\1\57"+
    "\1\0\1\60\7\0\1\1\32\0\1\3\12\0\1\51\17\0\1\52\304\0\1\3\177\0\13\3\35\0\2"+
    "\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\3\1\1\4\1\5\17\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\1\1\27\1\6\2\30\1\0\1\31\3\0\1\32"+
    "\1\0\2\6\1\0\5\6\1\33\2\6\1\34\12\6"+
    "\1\35\1\36\1\37\1\0\1\6\1\40\25\6\1\41"+
    "\2\6\1\42\22\6\1\43\2\6\1\44\4\6\1\45"+
    "\7\6\1\46\10\6\1\47\12\6\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\242\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\154\0\154\0\154\0\154\0\154\0\u04da\0\154"+
    "\0\u0510\0\154\0\154\0\154\0\154\0\154\0\154\0\154"+
    "\0\154\0\u0546\0\154\0\u057c\0\242\0\u05b2\0\330\0\154"+
    "\0\u05e8\0\u010e\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c"+
    "\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u021c\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\154\0\154\0\154\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\154\0\u103e"+
    "\0\u1074\0\u021c\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8"+
    "\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368"+
    "\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u021c"+
    "\0\u1518\0\u154e\0\u1584\0\u15ba\0\u021c\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u021c\0\u176a\0\u17a0\0\u17d6"+
    "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u021c\0\u191a\0\u1950"+
    "\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00"+
    "\0\u021c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\3\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\16\1\15"+
    "\1\17\1\20\1\21\1\22\1\23\1\15\1\24\1\25"+
    "\1\26\1\15\1\27\1\15\1\30\1\31\3\15\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\2\15"+
    "\1\52\1\53\1\54\1\3\2\55\1\56\62\3\67\0"+
    "\3\4\62\0\4\57\1\60\1\61\60\57\5\62\1\63"+
    "\1\60\57\62\7\0\1\64\1\65\67\0\1\12\65\0"+
    "\2\15\1\66\13\15\1\67\10\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\11\15\1\71\15\15\20\0\1\72"+
    "\1\15\1\0\1\70\1\54\12\0\27\15\20\0\2\15"+
    "\1\0\1\70\1\54\12\0\5\15\1\73\21\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\13\15\1\74\1\75"+
    "\12\15\20\0\2\15\1\0\1\70\1\54\12\0\10\15"+
    "\1\76\16\15\20\0\1\15\1\77\1\0\1\70\1\54"+
    "\12\0\7\15\1\100\17\15\20\0\2\15\1\0\1\70"+
    "\1\54\12\0\22\15\1\101\4\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\6\15\1\102\15\15\1\103\2\15"+
    "\20\0\2\15\1\0\1\70\1\54\12\0\2\15\1\104"+
    "\24\15\20\0\2\15\1\0\1\70\1\54\12\0\11\15"+
    "\1\105\4\15\1\106\10\15\20\0\2\15\1\0\1\70"+
    "\1\54\12\0\21\15\1\107\5\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\14\15\1\110\2\15\1\111\7\15"+
    "\20\0\2\15\1\0\1\70\1\54\12\0\5\15\1\112"+
    "\21\15\20\0\2\15\1\0\1\70\1\54\12\0\2\15"+
    "\1\113\24\15\20\0\2\15\1\0\1\70\1\54\47\0"+
    "\1\114\64\0\1\115\65\0\1\116\31\0\27\54\20\0"+
    "\2\54\2\0\1\54\1\0\3\56\62\0\1\57\2\0"+
    "\63\57\1\62\2\0\63\62\1\64\2\0\63\64\7\65"+
    "\1\0\1\117\55\65\12\0\3\15\1\76\23\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\6\15\1\120\20\15"+
    "\20\0\2\15\1\0\1\70\1\54\13\0\26\121\20\0"+
    "\2\121\15\0\12\15\1\122\14\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\6\15\1\123\20\15\20\0\2\15"+
    "\1\0\1\70\1\54\12\0\6\15\1\124\20\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\7\15\1\125\4\15"+
    "\1\126\12\15\20\0\2\15\1\0\1\70\1\54\12\0"+
    "\16\15\1\127\10\15\20\0\2\15\1\0\1\70\1\54"+
    "\12\0\20\15\1\130\6\15\20\0\2\15\1\0\1\70"+
    "\1\54\12\0\1\15\1\131\25\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\27\101\20\0\2\101\1\0\1\70"+
    "\1\54\12\0\14\15\1\132\1\15\1\133\10\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\1\15\1\134\25\15"+
    "\20\0\2\15\1\0\1\70\1\54\12\0\6\15\1\135"+
    "\20\15\20\0\2\15\1\0\1\70\1\54\12\0\16\15"+
    "\1\136\10\15\20\0\2\15\1\0\1\70\1\54\12\0"+
    "\6\15\1\137\10\15\1\140\7\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\12\15\1\141\14\15\20\0\2\15"+
    "\1\0\1\70\1\54\12\0\5\15\1\142\1\15\1\143"+
    "\17\15\20\0\2\15\1\0\1\70\1\54\12\0\21\15"+
    "\1\144\5\15\20\0\2\15\1\0\1\70\1\54\12\0"+
    "\11\15\1\145\15\15\20\0\2\15\1\0\1\70\1\54"+
    "\12\0\10\15\1\146\16\15\20\0\2\15\1\0\1\70"+
    "\1\54\7\0\1\147\70\0\7\15\1\150\17\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\27\121\20\0\2\121"+
    "\1\0\1\70\13\0\2\15\1\76\24\15\20\0\2\15"+
    "\1\0\1\70\1\54\12\0\2\15\1\151\24\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\5\15\1\76\21\15"+
    "\20\0\2\15\1\0\1\70\1\54\12\0\12\15\1\152"+
    "\14\15\20\0\2\15\1\0\1\70\1\54\12\0\5\15"+
    "\1\153\21\15\20\0\2\15\1\0\1\70\1\54\12\0"+
    "\1\15\1\154\25\15\20\0\2\15\1\0\1\70\1\54"+
    "\12\0\11\15\1\155\15\15\20\0\2\15\1\0\1\70"+
    "\1\54\12\0\16\15\1\156\10\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\7\15\1\157\17\15\20\0\2\15"+
    "\1\0\1\70\1\54\12\0\6\15\1\160\20\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\15\15\1\161\11\15"+
    "\20\0\2\15\1\0\1\70\1\54\12\0\17\15\1\162"+
    "\7\15\20\0\2\15\1\0\1\70\1\54\12\0\12\15"+
    "\1\163\14\15\20\0\2\15\1\0\1\70\1\54\12\0"+
    "\15\15\1\164\11\15\20\0\2\15\1\0\1\70\1\54"+
    "\12\0\4\15\1\165\22\15\20\0\2\15\1\0\1\70"+
    "\1\54\12\0\6\15\1\166\20\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\6\15\1\167\20\15\20\0\2\15"+
    "\1\0\1\70\1\54\12\0\22\15\1\170\4\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\11\15\1\160\15\15"+
    "\20\0\2\15\1\0\1\70\1\54\12\0\16\15\1\171"+
    "\10\15\20\0\2\15\1\0\1\70\1\54\12\0\16\15"+
    "\1\172\10\15\20\0\2\15\1\0\1\70\1\54\12\0"+
    "\22\15\1\173\4\15\20\0\2\15\1\0\1\70\1\54"+
    "\12\0\1\15\1\174\25\15\20\0\2\15\1\0\1\70"+
    "\1\54\12\0\3\15\1\175\23\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\12\15\1\176\14\15\20\0\2\15"+
    "\1\0\1\70\1\54\12\0\2\15\1\177\24\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\11\15\1\200\15\15"+
    "\20\0\2\15\1\0\1\70\1\54\12\0\15\15\1\201"+
    "\11\15\20\0\2\15\1\0\1\70\1\54\12\0\7\15"+
    "\1\202\17\15\20\0\2\15\1\0\1\70\1\54\12\0"+
    "\13\15\1\203\13\15\20\0\2\15\1\0\1\70\1\54"+
    "\12\0\14\15\1\204\12\15\20\0\2\15\1\0\1\70"+
    "\1\54\12\0\12\15\1\205\14\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\13\15\1\76\13\15\20\0\2\15"+
    "\1\0\1\70\1\54\12\0\13\15\1\206\13\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\14\15\1\207\12\15"+
    "\20\0\2\15\1\0\1\70\1\54\12\0\2\15\1\210"+
    "\24\15\20\0\2\15\1\0\1\70\1\54\12\0\16\15"+
    "\1\211\10\15\20\0\2\15\1\0\1\70\1\54\12\0"+
    "\6\15\1\212\20\15\20\0\2\15\1\0\1\70\1\54"+
    "\12\0\17\15\1\213\7\15\20\0\2\15\1\0\1\70"+
    "\1\54\12\0\2\15\1\200\24\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\23\15\1\214\3\15\20\0\2\15"+
    "\1\0\1\70\1\54\12\0\12\15\1\215\14\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\7\15\1\216\17\15"+
    "\20\0\2\15\1\0\1\70\1\54\12\0\27\15\20\0"+
    "\1\15\1\217\1\0\1\70\1\54\12\0\6\15\1\220"+
    "\20\15\20\0\2\15\1\0\1\70\1\54\12\0\15\15"+
    "\1\200\11\15\20\0\2\15\1\0\1\70\1\54\12\0"+
    "\14\15\1\221\12\15\20\0\2\15\1\0\1\70\1\54"+
    "\12\0\1\15\1\76\25\15\20\0\2\15\1\0\1\70"+
    "\1\54\12\0\6\15\1\76\20\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\16\15\1\222\10\15\20\0\2\15"+
    "\1\0\1\70\1\54\12\0\15\15\1\223\11\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\6\15\1\173\20\15"+
    "\20\0\2\15\1\0\1\70\1\54\12\0\7\15\1\224"+
    "\17\15\20\0\2\15\1\0\1\70\1\54\12\0\11\15"+
    "\1\225\15\15\20\0\2\15\1\0\1\70\1\54\12\0"+
    "\12\15\1\226\14\15\20\0\2\15\1\0\1\70\1\54"+
    "\12\0\2\15\1\227\24\15\20\0\2\15\1\0\1\70"+
    "\1\54\12\0\2\15\1\230\24\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\10\15\1\231\16\15\20\0\2\15"+
    "\1\0\1\70\1\54\12\0\5\15\1\232\21\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\15\15\1\225\11\15"+
    "\20\0\2\15\1\0\1\70\1\54\12\0\6\15\1\233"+
    "\20\15\20\0\2\15\1\0\1\70\1\54\12\0\11\15"+
    "\1\173\15\15\20\0\2\15\1\0\1\70\1\54\12\0"+
    "\6\15\1\200\20\15\20\0\2\15\1\0\1\70\1\54"+
    "\12\0\1\15\1\225\25\15\20\0\2\15\1\0\1\70"+
    "\1\54\12\0\1\15\1\234\25\15\20\0\2\15\1\0"+
    "\1\70\1\54\12\0\20\15\1\200\6\15\20\0\2\15"+
    "\1\0\1\70\1\54\12\0\1\15\1\235\25\15\20\0"+
    "\2\15\1\0\1\70\1\54\12\0\2\15\1\236\24\15"+
    "\20\0\2\15\1\0\1\70\1\54\12\0\6\15\1\237"+
    "\20\15\20\0\2\15\1\0\1\70\1\54\12\0\7\15"+
    "\1\240\17\15\20\0\2\15\1\0\1\70\1\54\12\0"+
    "\23\15\1\200\3\15\20\0\2\15\1\0\1\70\1\54"+
    "\12\0\12\15\1\241\14\15\20\0\2\15\1\0\1\70"+
    "\1\54\12\0\25\15\1\233\1\15\20\0\2\15\1\0"+
    "\1\70\1\54";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6966];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\26\1\5\11\1\1\1\11\1\1\10\11"+
    "\1\1\1\11\3\1\1\0\1\11\3\0\1\1\1\0"+
    "\2\1\1\0\23\1\3\11\1\0\27\1\1\11\72\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public TACLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TACLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 41: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 42: break;
          case 3: 
            { return TAC_elementTypeHolder.NEW_LINE;
            } 
            // fall through
          case 43: break;
          case 4: 
            { return TAC_elementTypeHolder.MINUS;
            } 
            // fall through
          case 44: break;
          case 5: 
            { return TAC_elementTypeHolder.NUMBER;
            } 
            // fall through
          case 45: break;
          case 6: 
            { return TAC_elementTypeHolder.STRINGVAR;
            } 
            // fall through
          case 46: break;
          case 7: 
            { return TAC_elementTypeHolder.COMMA;
            } 
            // fall through
          case 47: break;
          case 8: 
            { return TAC_elementTypeHolder.COLON;
            } 
            // fall through
          case 48: break;
          case 9: 
            { return TAC_elementTypeHolder.SEMICOLON;
            } 
            // fall through
          case 49: break;
          case 10: 
            { return TAC_elementTypeHolder.PLUS;
            } 
            // fall through
          case 50: break;
          case 11: 
            { return TAC_elementTypeHolder.AT;
            } 
            // fall through
          case 51: break;
          case 12: 
            { return TAC_elementTypeHolder.EQ;
            } 
            // fall through
          case 52: break;
          case 13: 
            { return TAC_elementTypeHolder.R_LACE_BRACE;
            } 
            // fall through
          case 53: break;
          case 14: 
            { return TAC_elementTypeHolder.L_LACE_BRACE;
            } 
            // fall through
          case 54: break;
          case 15: 
            { return TAC_elementTypeHolder.L_DOUBLE_LACE_BRACE;
            } 
            // fall through
          case 55: break;
          case 16: 
            { return TAC_elementTypeHolder.R_DOUBLE_LACE_BRACE;
            } 
            // fall through
          case 56: break;
          case 17: 
            { return TAC_elementTypeHolder.R_BRACKET;
            } 
            // fall through
          case 57: break;
          case 18: 
            { return TAC_elementTypeHolder.L_BRACKET;
            } 
            // fall through
          case 58: break;
          case 19: 
            { return TAC_elementTypeHolder.L_SQUARE_BRACKET;
            } 
            // fall through
          case 59: break;
          case 20: 
            { return TAC_elementTypeHolder.R_SQUARE_BRACKET;
            } 
            // fall through
          case 60: break;
          case 21: 
            { return TAC_elementTypeHolder.L_CURVED_BRACKET;
            } 
            // fall through
          case 61: break;
          case 22: 
            { return TAC_elementTypeHolder.R_CURVED_BRACKET;
            } 
            // fall through
          case 62: break;
          case 23: 
            { return TAC_elementTypeHolder.DOT;
            } 
            // fall through
          case 63: break;
          case 24: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 64: break;
          case 25: 
            { return TAC_elementTypeHolder.STRING;
            } 
            // fall through
          case 65: break;
          case 26: 
            { return TAC_elementTypeHolder.COMMENT;
            } 
            // fall through
          case 66: break;
          case 27: 
            { return TAC_elementTypeHolder.KEYWORDS;
            } 
            // fall through
          case 67: break;
          case 28: 
            { return TAC_elementTypeHolder.LEVEL;
            } 
            // fall through
          case 68: break;
          case 29: 
            { return TAC_elementTypeHolder.R_ARROW;
            } 
            // fall through
          case 69: break;
          case 30: 
            { return TAC_elementTypeHolder.L_ARROW;
            } 
            // fall through
          case 70: break;
          case 31: 
            { return TAC_elementTypeHolder.UEQ;
            } 
            // fall through
          case 71: break;
          case 32: 
            { return TAC_elementTypeHolder.JAVA_TYPE;
            } 
            // fall through
          case 72: break;
          case 33: 
            { return TAC_elementTypeHolder.BLOCK_COMMENT;
            } 
            // fall through
          case 73: break;
          case 34: 
            { return TAC_elementTypeHolder.THIS;
            } 
            // fall through
          case 74: break;
          case 35: 
            { return TAC_elementTypeHolder.THROW;
            } 
            // fall through
          case 75: break;
          case 36: 
            { return TAC_elementTypeHolder.MODIFIER;
            } 
            // fall through
          case 76: break;
          case 37: 
            { return TAC_elementTypeHolder.CLASS;
            } 
            // fall through
          case 77: break;
          case 38: 
            { return TAC_elementTypeHolder.THROWS;
            } 
            // fall through
          case 78: break;
          case 39: 
            { return TAC_elementTypeHolder.EXTENDS;
            } 
            // fall through
          case 79: break;
          case 40: 
            { return TAC_elementTypeHolder.IMPLEMENTS;
            } 
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
