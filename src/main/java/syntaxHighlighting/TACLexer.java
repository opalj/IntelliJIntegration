/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package syntaxHighlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import syntaxHighlighting.TAC_elementTypeHolder;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>TAC.flex</tt>
 */
class TACLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\50\1\5\1\0\1\52\2\0\1\3\1\44\1\45\1\7\1\0\1\40\1"+
    "\10\1\51\1\6\12\11\1\41\2\0\1\43\2\0\1\42\32\37\1\44\1\4\1\45\1\0\1\52\1\0"+
    "\1\27\1\32\1\26\1\34\1\13\1\21\1\15\1\24\1\20\2\37\1\22\1\47\1\12\1\16\1\31"+
    "\1\37\1\25\1\23\1\17\1\30\1\33\1\14\1\46\1\35\1\36\1\44\1\0\1\45\7\0\1\1\32"+
    "\0\1\2\12\0\1\44\17\0\1\45\304\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2"+
    "\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\5\1\1\3\17\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\1\4\2\14"+
    "\1\0\1\15\1\0\1\16\2\0\1\17\1\0\2\4"+
    "\1\0\5\4\1\20\2\4\1\21\12\4\1\22\1\0"+
    "\1\4\1\23\26\4\1\24\2\4\1\25\16\4\1\26"+
    "\4\4\1\27\2\4\1\30\4\4\1\31\7\4\1\32"+
    "\10\4\1\33\12\4\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"+
    "\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2"+
    "\0\u03dd\0\126\0\126\0\126\0\126\0\126\0\126\0\u0408"+
    "\0\126\0\u0433\0\201\0\u045e\0\254\0\126\0\u0489\0\126"+
    "\0\u0102\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u01d9\0\u068d\0\u06b8\0\u06e3"+
    "\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b"+
    "\0\u0866\0\u0891\0\126\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968"+
    "\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0"+
    "\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18"+
    "\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\126\0\u0cef\0\u0d1a\0\u01d9"+
    "\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72"+
    "\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u01d9\0\u0f9f"+
    "\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u01d9\0\u10cc"+
    "\0\u10f7\0\u1122\0\u114d\0\u01d9\0\u1178\0\u11a3\0\u11ce\0\u11f9"+
    "\0\u1224\0\u124f\0\u127a\0\u01d9\0\u12a5\0\u12d0\0\u12fb\0\u1326"+
    "\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u01d9\0\u13fd\0\u1428\0\u1453"+
    "\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\u01d9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\15\1\17\1\20"+
    "\1\21\1\22\1\23\1\15\1\24\1\25\1\26\1\15"+
    "\1\27\1\15\1\30\1\31\3\15\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\2\15\1\40\1\41\1\42\1\3"+
    "\1\43\1\44\50\3\54\0\2\4\50\0\3\45\1\46"+
    "\1\47\46\45\12\0\1\50\40\0\4\51\1\52\1\46"+
    "\45\51\6\0\1\53\1\54\54\0\1\12\52\0\2\15"+
    "\1\55\13\15\1\56\10\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\11\15\1\60\15\15\6\0\1\61\1\15"+
    "\1\0\1\57\1\42\11\0\27\15\6\0\2\15\1\0"+
    "\1\57\1\42\11\0\5\15\1\62\21\15\6\0\2\15"+
    "\1\0\1\57\1\42\11\0\13\15\1\63\1\64\12\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\10\15\1\65"+
    "\16\15\6\0\1\15\1\66\1\0\1\57\1\42\11\0"+
    "\7\15\1\67\17\15\6\0\2\15\1\0\1\57\1\42"+
    "\11\0\22\15\1\70\4\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\6\15\1\71\15\15\1\72\2\15\6\0"+
    "\2\15\1\0\1\57\1\42\11\0\2\15\1\73\24\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\11\15\1\74"+
    "\4\15\1\75\10\15\6\0\2\15\1\0\1\57\1\42"+
    "\11\0\21\15\1\76\5\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\14\15\1\77\2\15\1\100\7\15\6\0"+
    "\2\15\1\0\1\57\1\42\11\0\5\15\1\101\21\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\2\15\1\102"+
    "\24\15\6\0\2\15\1\0\1\57\1\42\43\0\1\103"+
    "\20\0\27\42\6\0\2\42\2\0\1\42\1\0\2\44"+
    "\50\0\1\45\1\0\51\45\1\51\1\0\51\51\1\53"+
    "\1\0\51\53\6\54\1\0\1\104\43\54\11\0\3\15"+
    "\1\65\23\15\6\0\2\15\1\0\1\57\1\42\11\0"+
    "\6\15\1\105\20\15\6\0\2\15\1\0\1\57\1\42"+
    "\12\0\26\106\6\0\2\106\14\0\12\15\1\107\14\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\6\15\1\110"+
    "\20\15\6\0\2\15\1\0\1\57\1\42\11\0\6\15"+
    "\1\111\20\15\6\0\2\15\1\0\1\57\1\42\11\0"+
    "\7\15\1\112\4\15\1\113\12\15\6\0\2\15\1\0"+
    "\1\57\1\42\11\0\16\15\1\114\10\15\6\0\2\15"+
    "\1\0\1\57\1\42\11\0\20\15\1\115\6\15\6\0"+
    "\2\15\1\0\1\57\1\42\11\0\1\15\1\116\25\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\27\70\6\0"+
    "\2\70\1\0\1\57\1\42\11\0\14\15\1\117\1\15"+
    "\1\120\10\15\6\0\2\15\1\0\1\57\1\42\11\0"+
    "\1\15\1\121\25\15\6\0\2\15\1\0\1\57\1\42"+
    "\11\0\6\15\1\122\20\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\16\15\1\123\10\15\6\0\2\15\1\0"+
    "\1\57\1\42\11\0\6\15\1\124\10\15\1\125\7\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\12\15\1\126"+
    "\14\15\6\0\2\15\1\0\1\57\1\42\11\0\5\15"+
    "\1\127\1\15\1\130\17\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\21\15\1\131\5\15\6\0\2\15\1\0"+
    "\1\57\1\42\11\0\7\15\1\132\1\15\1\133\15\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\10\15\1\134"+
    "\16\15\6\0\2\15\1\0\1\57\1\42\6\0\1\135"+
    "\55\0\7\15\1\136\17\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\27\106\6\0\2\106\1\0\1\57\12\0"+
    "\2\15\1\65\24\15\6\0\2\15\1\0\1\57\1\42"+
    "\11\0\2\15\1\137\24\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\5\15\1\65\21\15\6\0\2\15\1\0"+
    "\1\57\1\42\11\0\12\15\1\140\14\15\6\0\2\15"+
    "\1\0\1\57\1\42\11\0\5\15\1\141\21\15\6\0"+
    "\2\15\1\0\1\57\1\42\11\0\1\15\1\142\25\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\11\15\1\143"+
    "\15\15\6\0\2\15\1\0\1\57\1\42\11\0\16\15"+
    "\1\144\10\15\6\0\2\15\1\0\1\57\1\42\11\0"+
    "\7\15\1\145\17\15\6\0\2\15\1\0\1\57\1\42"+
    "\11\0\6\15\1\146\20\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\15\15\1\147\11\15\6\0\2\15\1\0"+
    "\1\57\1\42\11\0\17\15\1\150\7\15\6\0\2\15"+
    "\1\0\1\57\1\42\11\0\12\15\1\151\14\15\6\0"+
    "\2\15\1\0\1\57\1\42\11\0\15\15\1\152\11\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\4\15\1\153"+
    "\22\15\6\0\2\15\1\0\1\57\1\42\11\0\6\15"+
    "\1\154\20\15\6\0\2\15\1\0\1\57\1\42\11\0"+
    "\6\15\1\155\20\15\6\0\2\15\1\0\1\57\1\42"+
    "\11\0\22\15\1\156\4\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\11\15\1\146\15\15\6\0\2\15\1\0"+
    "\1\57\1\42\11\0\23\15\1\157\3\15\6\0\2\15"+
    "\1\0\1\57\1\42\11\0\16\15\1\160\10\15\6\0"+
    "\2\15\1\0\1\57\1\42\11\0\16\15\1\161\10\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\22\15\1\162"+
    "\4\15\6\0\2\15\1\0\1\57\1\42\11\0\1\15"+
    "\1\163\25\15\6\0\2\15\1\0\1\57\1\42\11\0"+
    "\3\15\1\164\23\15\6\0\2\15\1\0\1\57\1\42"+
    "\11\0\12\15\1\165\14\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\2\15\1\166\24\15\6\0\2\15\1\0"+
    "\1\57\1\42\11\0\11\15\1\167\15\15\6\0\2\15"+
    "\1\0\1\57\1\42\11\0\15\15\1\170\11\15\6\0"+
    "\2\15\1\0\1\57\1\42\11\0\7\15\1\171\17\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\13\15\1\172"+
    "\13\15\6\0\2\15\1\0\1\57\1\42\11\0\14\15"+
    "\1\173\12\15\6\0\2\15\1\0\1\57\1\42\11\0"+
    "\12\15\1\174\14\15\6\0\2\15\1\0\1\57\1\42"+
    "\11\0\13\15\1\65\13\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\13\15\1\175\13\15\6\0\2\15\1\0"+
    "\1\57\1\42\11\0\14\15\1\176\12\15\6\0\2\15"+
    "\1\0\1\57\1\42\11\0\2\15\1\177\24\15\6\0"+
    "\2\15\1\0\1\57\1\42\11\0\16\15\1\200\10\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\6\15\1\201"+
    "\20\15\6\0\2\15\1\0\1\57\1\42\11\0\17\15"+
    "\1\202\7\15\6\0\2\15\1\0\1\57\1\42\11\0"+
    "\2\15\1\167\24\15\6\0\2\15\1\0\1\57\1\42"+
    "\11\0\23\15\1\203\3\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\12\15\1\204\14\15\6\0\2\15\1\0"+
    "\1\57\1\42\11\0\7\15\1\205\17\15\6\0\2\15"+
    "\1\0\1\57\1\42\11\0\27\15\6\0\1\15\1\206"+
    "\1\0\1\57\1\42\11\0\6\15\1\207\20\15\6\0"+
    "\2\15\1\0\1\57\1\42\11\0\15\15\1\167\11\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\14\15\1\210"+
    "\12\15\6\0\2\15\1\0\1\57\1\42\11\0\1\15"+
    "\1\65\25\15\6\0\2\15\1\0\1\57\1\42\11\0"+
    "\6\15\1\65\20\15\6\0\2\15\1\0\1\57\1\42"+
    "\11\0\16\15\1\211\10\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\15\15\1\212\11\15\6\0\2\15\1\0"+
    "\1\57\1\42\11\0\6\15\1\162\20\15\6\0\2\15"+
    "\1\0\1\57\1\42\11\0\7\15\1\213\17\15\6\0"+
    "\2\15\1\0\1\57\1\42\11\0\11\15\1\214\15\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\12\15\1\215"+
    "\14\15\6\0\2\15\1\0\1\57\1\42\11\0\2\15"+
    "\1\216\24\15\6\0\2\15\1\0\1\57\1\42\11\0"+
    "\2\15\1\217\24\15\6\0\2\15\1\0\1\57\1\42"+
    "\11\0\10\15\1\220\16\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\5\15\1\221\21\15\6\0\2\15\1\0"+
    "\1\57\1\42\11\0\15\15\1\214\11\15\6\0\2\15"+
    "\1\0\1\57\1\42\11\0\6\15\1\222\20\15\6\0"+
    "\2\15\1\0\1\57\1\42\11\0\11\15\1\162\15\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\6\15\1\167"+
    "\20\15\6\0\2\15\1\0\1\57\1\42\11\0\1\15"+
    "\1\214\25\15\6\0\2\15\1\0\1\57\1\42\11\0"+
    "\1\15\1\223\25\15\6\0\2\15\1\0\1\57\1\42"+
    "\11\0\20\15\1\167\6\15\6\0\2\15\1\0\1\57"+
    "\1\42\11\0\1\15\1\224\25\15\6\0\2\15\1\0"+
    "\1\57\1\42\11\0\2\15\1\225\24\15\6\0\2\15"+
    "\1\0\1\57\1\42\11\0\6\15\1\226\20\15\6\0"+
    "\2\15\1\0\1\57\1\42\11\0\7\15\1\227\17\15"+
    "\6\0\2\15\1\0\1\57\1\42\11\0\23\15\1\167"+
    "\3\15\6\0\2\15\1\0\1\57\1\42\11\0\12\15"+
    "\1\230\14\15\6\0\2\15\1\0\1\57\1\42\11\0"+
    "\25\15\1\222\1\15\6\0\2\15\1\0\1\57\1\42";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5547];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\26\1\6\11\1\1\1\11\3\1\1\0"+
    "\1\11\1\0\1\11\2\0\1\1\1\0\2\1\1\0"+
    "\23\1\1\11\1\0\30\1\1\11\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public TACLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TACLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 29: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 30: break;
          case 3: 
            { return TAC_elementTypeHolder.NUMBER;
            } 
            // fall through
          case 31: break;
          case 4: 
            { return TAC_elementTypeHolder.STRINGVAR;
            } 
            // fall through
          case 32: break;
          case 5: 
            { return TAC_elementTypeHolder.COMMA;
            } 
            // fall through
          case 33: break;
          case 6: 
            { return TAC_elementTypeHolder.COLON;
            } 
            // fall through
          case 34: break;
          case 7: 
            { return TAC_elementTypeHolder.AT;
            } 
            // fall through
          case 35: break;
          case 8: 
            { return TAC_elementTypeHolder.EQ;
            } 
            // fall through
          case 36: break;
          case 9: 
            { return TAC_elementTypeHolder.LBRACKET;
            } 
            // fall through
          case 37: break;
          case 10: 
            { return TAC_elementTypeHolder.RBRACKET;
            } 
            // fall through
          case 38: break;
          case 11: 
            { return TAC_elementTypeHolder.DOT;
            } 
            // fall through
          case 39: break;
          case 12: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 40: break;
          case 13: 
            { return TAC_elementTypeHolder.STRING;
            } 
            // fall through
          case 41: break;
          case 14: 
            { return TAC_elementTypeHolder.NEW_LINE;
            } 
            // fall through
          case 42: break;
          case 15: 
            { return TAC_elementTypeHolder.COMMENT;
            } 
            // fall through
          case 43: break;
          case 16: 
            { return TAC_elementTypeHolder.KEYWORDS;
            } 
            // fall through
          case 44: break;
          case 17: 
            { return TAC_elementTypeHolder.LEVEL;
            } 
            // fall through
          case 45: break;
          case 18: 
            { return TAC_elementTypeHolder.UEQ;
            } 
            // fall through
          case 46: break;
          case 19: 
            { return TAC_elementTypeHolder.JAVA_TYPE;
            } 
            // fall through
          case 47: break;
          case 20: 
            { return TAC_elementTypeHolder.BLOCK_COMMENT;
            } 
            // fall through
          case 48: break;
          case 21: 
            { return TAC_elementTypeHolder.THIS;
            } 
            // fall through
          case 49: break;
          case 22: 
            { return TAC_elementTypeHolder.VOID;
            } 
            // fall through
          case 50: break;
          case 23: 
            { return TAC_elementTypeHolder.THROW;
            } 
            // fall through
          case 51: break;
          case 24: 
            { return TAC_elementTypeHolder.MODIFIER;
            } 
            // fall through
          case 52: break;
          case 25: 
            { return TAC_elementTypeHolder.CLASS;
            } 
            // fall through
          case 53: break;
          case 26: 
            { return TAC_elementTypeHolder.THROWS;
            } 
            // fall through
          case 54: break;
          case 27: 
            { return TAC_elementTypeHolder.EXTENDS;
            } 
            // fall through
          case 55: break;
          case 28: 
            { return TAC_elementTypeHolder.IMPLEMENTS;
            } 
            // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
