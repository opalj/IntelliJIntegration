/*
 *  BSD 2-Clause License - see ./LICENSE for details.
 */

package Actions;

import JavaByteCodeLanguage.autoGenerated.psi.*;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.ScrollType;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;
import com.intellij.psi.util.PsiTreeUtil;
import org.jetbrains.annotations.NotNull;

/**
 * had caused severe issues)
 *
 * <p>This action performs on jump statements in the bytecode. It puts the caret on the line with
 * the matching PC, e.g. GOTO(523) will put the caret on the line where the program counter equals
 * 523.
 */
public class JumpToPcJbc extends AnAction {
  private Editor editor;
  private PsiElement elementAt;
  private JavaByteCodeInstructionBody parent;

  @Override
  public void update(@NotNull AnActionEvent e) {
    editor = e.getData(CommonDataKeys.EDITOR);
    PsiFile psiFile = e.getData(CommonDataKeys.PSI_FILE);
    if (editor == null || psiFile == null) {
      return;
    }
    String extension = ActionUtil.ExtString(e);
    elementAt = psiFile.findElementAt(editor.getCaretModel().getOffset());
    // the parent is the current instruction line, e.g. 40 223 GOTO(523),
    // where 40 is the PC and 223 is the Line
    parent = PsiTreeUtil.getParentOfType(elementAt, JavaByteCodeInstructionBody.class);
    // filter instructions for which this action should work
    e.getPresentation()
        .setEnabledAndVisible(
            parent != null
                && (parent.getInstr().getMnemonic().getText().contains("GOTO")
                    || parent.getInstr().getMnemonic().getText().contains("IF"))
                && "jbc".equals(extension));
  }

  @Override
  public void actionPerformed(@NotNull AnActionEvent e) {
    PsiElement jumpTargetPC = parent.getInstr().getNumber();
    if (jumpTargetPC != null) {
      // take the method to which this instruction belongs to...
      JavaByteCodeMethodDeclaration methodDeclaration =
          PsiTreeUtil.getParentOfType(elementAt, JavaByteCodeMethodDeclaration.class);
      // ... and iterate over all instructions until the jump target has been found...
      for (JavaByteCodePcNumber javaByteCodePcNumber :
          PsiTreeUtil.findChildrenOfType(methodDeclaration, JavaByteCodePcNumber.class)) {
        // ... and set the caret accordingly
        if (javaByteCodePcNumber.getNumber().getText().equals(jumpTargetPC.getText())) {
          editor.getCaretModel().moveToOffset(javaByteCodePcNumber.getTextOffset(), true);
          editor.getScrollingModel().scrollToCaret(ScrollType.CENTER_UP);
        }
      } // for()
    } // jumpTargetPC
  } // GOTO/IF
}
