package Actions;

import JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeClassHead;
import JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeInstructionBody;
import JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeJType;
import com.intellij.notification.NotificationDisplayType;
import com.intellij.notification.NotificationGroup;
import com.intellij.notification.Notifications;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import com.intellij.openapi.editor.Document;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.fileEditor.FileEditorManager;
import com.intellij.openapi.fileEditor.OpenFileDescriptor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.*;
import com.intellij.psi.util.PsiTreeUtil;
import java.util.Objects;

/** Jumps from a given Instruction to the source file and set the caret to given line number */
public class JumpToSource extends AnAction {
  private Project project;

  @Override
  public void update(AnActionEvent e) {
    this.project = e.getProject();
    final VirtualFile virtualFile = e.getData(CommonDataKeys.VIRTUAL_FILE);
    Editor editor = e.getData(CommonDataKeys.EDITOR);
    PsiFile psiFile = e.getData(CommonDataKeys.PSI_FILE);
    final String extension = virtualFile != null ? virtualFile.getExtension() : "";
    PsiElement element =
        Objects.requireNonNull(psiFile)
            .findElementAt(Objects.requireNonNull(editor).getCaretModel().getOffset());
    element = PsiTreeUtil.getParentOfType(element, JavaByteCodeInstructionBody.class);
    e.getPresentation()
        .setEnabledAndVisible(project != null && element != null && "jbc".equals(extension));
  }

  @Override
  public void actionPerformed(AnActionEvent e) {
    Editor editor = e.getData(CommonDataKeys.EDITOR);
    PsiFile psiFile = e.getData(CommonDataKeys.PSI_FILE);
    if (editor == null || psiFile == null) {
      return;
    }
    PsiElement elementAt = psiFile.findElementAt(editor.getCaretModel().getOffset());
    JavaByteCodeInstructionBody parent =
        PsiTreeUtil.getParentOfType(elementAt, JavaByteCodeInstructionBody.class);
    int lineNumber =
        Integer.parseInt(Objects.requireNonNull(parent).getLineNumber().getNumber().getText());
    if (lineNumber == 0) {
      return;
    }
    for (PsiElement child : psiFile.getChildren()) {
      if (child instanceof JavaByteCodeClassHead
          && ((JavaByteCodeClassHead) child).getJTypeList().size() > 0) {
        JavaByteCodeJType fullyQualifiedClass =
            ((JavaByteCodeClassHead) child).getJTypeList().get(0);
        // e.g. java.lang.String -> resolve = String
        PsiElement resolve =
            fullyQualifiedClass.getReferences()[fullyQualifiedClass.getReferences().length - 1]
                .resolve();
        resolve = resolve != null ? resolve.getNavigationElement() : null;
        if (resolve != null) {
          PsiFile resolvePsiFile = Objects.requireNonNull(resolve).getContainingFile();
          VirtualFile resolvedVirtualFile = resolvePsiFile.getVirtualFile();
          Document document = PsiDocumentManager.getInstance(project).getDocument(resolvePsiFile);
          int lineStartOffset = Objects.requireNonNull(document).getLineStartOffset(lineNumber - 1);
          FileEditorManager.getInstance(project)
              .openTextEditor(
                  new OpenFileDescriptor(project, resolvedVirtualFile, lineStartOffset), true);
          return;
        } // end if resolve
      } // end if JavaByteCode
    } // end for
    Notifications.Bus.notify(
        new NotificationGroup("OpalPlugin", NotificationDisplayType.BALLOON, false)
            .createNotification()
            .setContent("can't find navigation path"));
  }
}
