package Actions;

import JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeClassHead;
import JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeInstructionBody;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import com.intellij.openapi.editor.Document;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.fileEditor.FileEditorManager;
import com.intellij.openapi.fileEditor.OpenFileDescriptor;
import com.intellij.openapi.project.Project;
import com.intellij.psi.*;
import com.intellij.psi.util.PsiTreeUtil;

import java.util.Objects;

/**
 * Jumps from a given Instruction to the Sourcefile and set the Caret to given Linenumber
 */
public class JumpToSource extends AnAction {
    @Override
    public void actionPerformed(AnActionEvent e) {
        Project project = e.getProject();
        Editor editor = e.getData(CommonDataKeys.EDITOR);
        PsiFile psiFile = e.getData(CommonDataKeys.PSI_FILE);
        if(editor == null || psiFile == null || project == null){
            return ;
        }
        PsiElement elementAt =psiFile.findElementAt(editor.getCaretModel().getOffset());
        JavaByteCodeInstructionBody parent =
                PsiTreeUtil.getParentOfType(elementAt, JavaByteCodeInstructionBody.class);
        if(parent == null){
            return;
        }
        int lineNumber = Integer.parseInt(parent.getLineNumber().getNumber().getText());
        PsiElement ClassName = null;
        for (PsiElement child : psiFile.getChildren()) {
            if(child instanceof  JavaByteCodeClassHead){
                if(((JavaByteCodeClassHead)child).getJTypeList().size()>0)
                ClassName = ((JavaByteCodeClassHead)child).getJTypeList().get(0);
                break;
            }
        }
        if(ClassName != null){
            PsiElement resolve = ClassName.getReferences()[ClassName.getReferences().length - 1].resolve();
            Document document = PsiDocumentManager.getInstance(project).getDocument(Objects.requireNonNull(resolve).getContainingFile());
            int lineStartOffset = Objects.requireNonNull(document).getLineStartOffset(lineNumber-1);
            FileEditorManager.getInstance(project).openTextEditor(
                    new OpenFileDescriptor(project,
                            resolve.getContainingFile().getVirtualFile(),
                            lineStartOffset
                    ),true);
        }
    }
}
