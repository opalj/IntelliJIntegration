package Actions;

import JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeDefMethodName;
import com.intellij.notification.NotificationDisplayType;
import com.intellij.notification.NotificationGroup;
import com.intellij.notification.Notifications;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.ScrollType;
import com.intellij.openapi.fileEditor.FileEditor;
import com.intellij.openapi.fileEditor.FileEditorManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.*;
import taclanguage.autogenerated.psi.TACDefMethodName;

public class JumpToTac extends AnAction {

  @Override
  public void update(AnActionEvent e) {}

  @Override
  public void actionPerformed(AnActionEvent e) {
    final Project project = e.getProject();
    final Editor editor = e.getData(CommonDataKeys.EDITOR);
    PsiFile jbcFile = e.getData(CommonDataKeys.PSI_FILE);

    if (editor == null || jbcFile == null || project == null) {
      return;
    }

    PsiElement elementAt = jbcFile.findElementAt(editor.getCaretModel().getOffset());
    if (elementAt.getParent() instanceof JavaByteCodeDefMethodName) {
        String fileNameWithoutExtension = jbcFile.getVirtualFile().getNameWithoutExtension();

        FileEditorManager fileEditorManager = FileEditorManager.getInstance(project);
        VirtualFile classFile = null;
        for (VirtualFile vf : fileEditorManager.getOpenFiles()) {
            if (vf.getNameWithoutExtension().equals(fileNameWithoutExtension)) {
                classFile = vf;
                break;
            }
        }

        FileEditor[] fileEditors = fileEditorManager.getAllEditors(classFile);
        for (FileEditor fileEditor : fileEditors) {
            if (fileEditor.getName().equals("TAC")) {
                fileEditorManager.openFile(classFile, true);
                fileEditorManager.setSelectedEditor(classFile, "OPAL-TAC");

                FileEditor tacEditor = fileEditorManager.getSelectedEditor();

                PsiFile tacFile = PsiManager.getInstance(project).findFile(tacEditor.getFile());

                tacFile.accept(new PsiElementVisitor() {
                    @Override
                    public void visitElement(PsiElement element) {
                        super.visitElement(element);
                        if(element instanceof TACDefMethodName) {
                            if(element.getText().equals(elementAt.getText())) {
                                fileEditorManager.getSelectedTextEditor().getCaretModel().moveToOffset(element.getTextOffset());
                                fileEditorManager.getSelectedTextEditor().getScrollingModel().scrollToCaret(ScrollType.CENTER);
                            }
                        } else {
                            for(PsiElement child : element.getChildren()) {
                                visitElement(child);
                            }
                        }
                    }
                }); // tacFile.accept()

                return;
            } // if(name.equals("TAC))
        } // for(fileEditors)
    } // if(instanceof)

    notifyOnFail("Can't find editor");
  }

  private void notifyOnFail(String message) {
      Notifications.Bus.notify(
              new NotificationGroup("OpalPlugin", NotificationDisplayType.BALLOON, false)
                      .createNotification()
                      .setContent(message));
  }
}
