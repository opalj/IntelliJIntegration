package Actions;

import JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeMethodName;
import com.intellij.notification.NotificationDisplayType;
import com.intellij.notification.NotificationGroup;
import com.intellij.notification.Notifications;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.ScrollType;
import com.intellij.openapi.fileEditor.FileEditor;
import com.intellij.openapi.fileEditor.FileEditorManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiElementVisitor;
import com.intellij.psi.PsiFile;
import com.intellij.psi.PsiManager;
import taclanguage.autogenerated.psi.TACMethodName;

public class TacToBytecode extends AnAction {

  @Override
  public void update(AnActionEvent e) {
    final Project project = e.getProject();
    final Editor editor = e.getData(CommonDataKeys.EDITOR);
    PsiFile tacFile = e.getData(CommonDataKeys.PSI_FILE);

    e.getPresentation().setEnabled(project != null && editor != null && tacFile != null);
  }

  @Override
  public void actionPerformed(AnActionEvent e) {
    final Project project = e.getProject();
    final Editor editor = e.getData(CommonDataKeys.EDITOR);
    PsiFile tacFile = e.getData(CommonDataKeys.PSI_FILE);

    PsiElement elementAt = tacFile.findElementAt(editor.getCaretModel().getOffset());
    if (elementAt.getParent().getParent() instanceof TACMethodName) {
      String fileNameWithoutExtension = tacFile.getVirtualFile().getNameWithoutExtension();

      FileEditorManager fileEditorManager = FileEditorManager.getInstance(project);
      VirtualFile classFile = null;
      for (VirtualFile vf : fileEditorManager.getOpenFiles()) {
        if (vf.getNameWithoutExtension().equals(fileNameWithoutExtension)) {
          classFile = vf;
          break;
        }
      }

      FileEditor[] fileEditors = fileEditorManager.getAllEditors(classFile);
      for (FileEditor fileEditor : fileEditors) {
        if (fileEditor.getName().equals("Bytecode")) {
          fileEditorManager.openFile(classFile, true);
          fileEditorManager.setSelectedEditor(classFile, "OPAL-DIS");

          FileEditor jbcEditor = fileEditorManager.getSelectedEditor();

          PsiFile jbcFile = PsiManager.getInstance(project).findFile(jbcEditor.getFile());

          jbcFile.accept(
              new PsiElementVisitor() {
                @Override
                public void visitElement(PsiElement element) {
                  super.visitElement(element);
                  if (element instanceof JavaByteCodeMethodName) {
                    if (element.getText().equals(elementAt.getParent().getParent().getText())) {
                      System.out.println(element.getText());
                      fileEditorManager
                          .getSelectedTextEditor()
                          .getCaretModel()
                          .moveToOffset(element.getTextOffset());
                      fileEditorManager
                          .getSelectedTextEditor()
                          .getScrollingModel()
                          .scrollToCaret(ScrollType.CENTER);
                    }
                  } else {
                    for (PsiElement child : element.getChildren()) {
                      visitElement(child);
                    }
                  }
                }
              }); // tacFile.accept()

          return;
        } // if(name.equals("TAC))
      } // for(fileEditors)
    } // if(instanceof)

    notifyOnFail("Can't find editor");
  }

  private void notifyOnFail(String message) {
    Notifications.Bus.notify(
        new NotificationGroup("OpalPlugin", NotificationDisplayType.BALLOON, false)
            .createNotification()
            .setContent(message));
  }
}
