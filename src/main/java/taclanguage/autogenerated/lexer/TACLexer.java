/*
 *  BSD 2-Clause License - see ./LICENSE for details.
 */

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package taclanguage.autogenerated.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static taclanguage.autogenerated.psi.TAC_elementTypeHolder.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>TAC.flex</tt>
 */
public class TACLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1696 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\43\3\1\5\33\3");

  /* The ZZ_CMAP_A table has 384 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\4\2\22\0\1\3\1\67\1\14\1\0\1\70\2\63\1\12\1\15\1\20\1\5\1\63\1\62"+
    "\1\6\1\10\1\4\12\7\1\71\1\72\1\64\1\66\1\65\1\0\1\60\1\74\1\61\1\40\1\61\1"+
    "\11\1\75\2\61\1\42\2\61\1\41\1\57\2\61\1\37\5\61\1\56\4\61\1\17\1\13\1\22"+
    "\1\63\1\70\1\0\1\25\1\46\1\23\1\45\1\27\1\36\1\51\1\50\1\33\2\61\1\24\1\32"+
    "\1\30\1\43\1\53\1\61\1\35\1\26\1\34\1\31\1\44\1\52\1\55\1\47\1\54\1\16\1\63"+
    "\1\21\7\0\1\1\45\0\1\15\17\0\1\20\154\0\2\1\122\0\1\73\3\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\3\4\1\5\1\6\1\7\2\2"+
    "\2\10\1\11\21\7\1\12\1\13\2\14\1\15\1\2"+
    "\1\16\1\17\1\20\2\7\1\21\1\0\2\5\1\0"+
    "\1\22\3\0\1\1\3\0\5\7\1\1\13\7\1\23"+
    "\21\7\1\14\2\7\1\0\1\1\2\0\3\7\1\4"+
    "\2\7\3\1\1\0\12\7\1\24\10\7\1\0\16\7"+
    "\1\21\1\1\2\0\3\7\1\4\1\24\3\1\5\7"+
    "\1\25\6\7\1\26\3\7\1\0\12\7\1\1\2\0"+
    "\1\7\2\1\12\7\1\23\1\7\1\27\1\0\10\7"+
    "\1\1\1\0\2\1\10\7\1\30\1\0\6\7\1\31"+
    "\1\1\1\0\2\1\3\7\1\32\3\7\1\0\1\7"+
    "\1\33\1\7\1\1\1\0\1\1\1\34\4\7\1\0"+
    "\2\7\1\1\1\0\1\1\3\7\1\0\1\7\1\1"+
    "\1\0\1\1\1\0\1\35\1\0\1\36\2\1\2\0"+
    "\1\1\11\0\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\76\0\174\0\76\0\272\0\370\0\76"+
    "\0\u0136\0\u0174\0\u01b2\0\76\0\u01f0\0\76\0\u022e\0\u026c"+
    "\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c"+
    "\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\76"+
    "\0\76\0\u064c\0\u068a\0\u06c8\0\u06c8\0\76\0\76\0\76"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u0174\0\76"+
    "\0\u087a\0\u01b2\0\u08b8\0\76\0\u08f6\0\u0934\0\u0972\0\u09b0"+
    "\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90"+
    "\0\u0136\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132"+
    "\0\u1170\0\u11ae\0\76\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4"+
    "\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\76\0\u1e08\0\u1e46"+
    "\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u0136\0\u0136\0\u1f7c\0\u1fba"+
    "\0\u01f0\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u0136\0\u212e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u0136\0\u22a2\0\u22e0"+
    "\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0"+
    "\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0"+
    "\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0"+
    "\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u0136\0\u2a62"+
    "\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52"+
    "\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42"+
    "\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u0136\0\u2f78\0\u2fb6\0\u2ff4"+
    "\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u0136\0\u312a\0\u3168\0\u31a6"+
    "\0\u31e4\0\u3222\0\u3260\0\u329e\0\u0136\0\u32dc\0\u331a\0\u3358"+
    "\0\u3396\0\u33d4\0\u0136\0\u3412\0\u3450\0\u348e\0\u34cc\0\76"+
    "\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc"+
    "\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac"+
    "\0\u38ea\0\u3928\0\u3966\0\u0136\0\u39a4\0\u0136\0\u39e2\0\u3a20"+
    "\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u3bd2\0\u3c10"+
    "\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\1\14\1\15\1\14\3\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\11\1\25\1\26"+
    "\1\27\1\30\1\31\4\11\1\32\1\33\1\34\2\11"+
    "\1\35\1\11\1\36\3\11\1\37\1\40\1\11\1\41"+
    "\1\5\1\42\1\43\1\44\1\45\1\11\1\46\1\47"+
    "\1\50\1\51\1\52\102\0\1\53\1\54\77\0\1\7"+
    "\75\0\1\7\1\55\1\56\12\0\1\56\11\0\1\56"+
    "\6\0\1\56\37\0\1\11\1\0\1\11\11\0\35\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\12\57\1\60\1\61\62\57\13\62\1\63\1\60\61\62"+
    "\21\0\1\64\2\0\1\65\2\0\1\66\23\0\1\67"+
    "\31\0\1\11\1\0\1\11\11\0\1\11\1\70\1\71"+
    "\4\11\1\72\15\11\1\73\7\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\20\11\1\74\1\75\13\11\1\0\1\11"+
    "\2\0\2\11\2\0\1\11\3\0\2\11\7\0\1\11"+
    "\1\0\1\11\11\0\23\11\1\76\11\11\1\0\1\11"+
    "\2\0\2\11\2\0\1\11\3\0\2\11\7\0\1\11"+
    "\1\0\1\11\11\0\11\11\1\77\12\11\1\100\1\101"+
    "\7\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\11\1\0\1\11\11\0\1\11\1\102"+
    "\3\11\1\103\24\11\1\104\2\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\2\11\1\105\1\11\1\106\30\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\5\11\1\107\1\11\1\110"+
    "\3\11\1\111\21\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\7\0\1\11\1\0\1\11\11\0"+
    "\12\11\1\112\12\11\1\113\7\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\4\11\1\114\30\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\1\11\1\115\1\116\5\11\1\117\24\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\15\11\1\120\17\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\20\11\1\121\14\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\4\11\1\122\13\11"+
    "\1\123\14\11\1\0\1\11\2\0\2\11\2\0\1\11"+
    "\3\0\2\11\7\0\1\11\1\0\1\11\11\0\20\11"+
    "\1\124\3\11\1\125\10\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\20\11\1\126\14\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\2\11\1\127\3\11\1\130\3\11\1\131\22\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\4\11\1\132\30\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\11\0\1\11\11\0\35\11\1\0\1\11\2\0\1\5"+
    "\1\0\1\133\1\0\1\11\3\0\2\11\65\0\1\5"+
    "\1\133\75\0\1\133\16\0\1\11\1\0\1\11\11\0"+
    "\11\11\1\134\23\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\7\0\1\11\1\0\1\11\11\0"+
    "\10\11\1\135\24\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\1\53\2\0\73\53\4\54\1\0"+
    "\1\136\70\54\7\0\1\55\1\0\1\56\12\0\1\56"+
    "\11\0\1\56\6\0\1\56\37\0\1\56\66\0\1\57"+
    "\2\0\73\57\1\62\2\0\73\62\44\0\1\137\106\0"+
    "\1\140\45\0\1\141\57\0\1\11\1\0\1\11\11\0"+
    "\2\11\1\142\32\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\7\0\1\11\1\0\1\11\11\0"+
    "\6\11\1\143\2\11\1\144\23\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\30\11\1\145\4\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\2\11\1\146\32\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\5\11\1\147\27\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\150\1\0"+
    "\1\150\7\0\1\64\1\0\4\150\1\151\12\150\1\152"+
    "\15\150\1\0\1\150\1\153\1\0\2\11\2\0\1\11"+
    "\3\0\2\150\7\0\1\11\1\0\1\11\11\0\3\11"+
    "\1\154\31\11\1\0\1\11\2\0\2\11\2\0\1\11"+
    "\3\0\2\11\7\0\1\11\1\0\1\11\11\0\2\11"+
    "\1\155\7\11\1\156\22\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\5\11\1\157\27\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\20\11\1\160\14\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\3\11\1\161\31\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\6\11\1\162\26\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\1\163\10\11\1\164\23\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\11\11\1\165\23\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\27\11\1\111\5\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\11\11\1\166\23\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\30\11\1\167\4\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\2\11\1\170\3\11\1\171\26\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\12\11\1\172\22\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\11\11\1\173\23\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\20\11\1\174\14\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\1\11\1\175\33\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\5\11\1\176\27\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\2\0"+
    "\2\177\3\0\1\11\1\0\1\11\11\0\35\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\1\11\1\200\6\11\1\201"+
    "\24\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\11\1\0\1\11\11\0\13\11\1\202"+
    "\21\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\11\1\0\1\11\11\0\6\11\1\203"+
    "\26\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\11\1\0\1\11\11\0\20\11\1\204"+
    "\14\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\11\1\0\1\11\11\0\11\11\1\205"+
    "\23\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\11\1\0\1\11\11\0\11\11\1\206"+
    "\23\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\11\1\0\1\11\11\0\12\11\1\207"+
    "\22\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\11\1\0\1\11\11\0\23\11\1\210"+
    "\11\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\11\1\0\1\11\11\0\10\11\1\211"+
    "\7\11\1\212\14\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\7\0\1\11\1\0\1\11\11\0"+
    "\11\11\1\213\23\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\7\0\1\11\1\0\1\11\11\0"+
    "\11\11\1\214\23\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\7\0\1\11\1\0\1\11\11\0"+
    "\4\11\1\215\30\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\4\0\1\216\100\0\1\137\1\0"+
    "\1\137\7\0\1\64\1\0\4\137\1\217\30\137\1\0"+
    "\1\137\1\153\11\0\2\137\23\0\1\220\107\0\1\221"+
    "\47\0\1\11\1\0\1\11\11\0\3\11\1\222\31\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\26\11\1\223\6\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\1\224\34\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\1\11\1\225\33\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\12\11\1\226\22\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\26\11\1\226\6\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\150\1\0\1\150\7\0\1\64\1\0\4\150\1\151"+
    "\30\150\1\0\1\150\1\153\1\0\2\11\2\0\1\11"+
    "\3\0\2\150\7\0\1\150\1\0\1\150\7\0\1\64"+
    "\1\0\4\150\1\151\25\150\1\227\2\150\1\0\1\150"+
    "\1\153\1\0\2\11\2\0\1\11\3\0\2\150\7\0"+
    "\1\150\1\0\1\150\7\0\1\64\1\0\4\150\1\151"+
    "\1\230\27\150\1\0\1\150\1\153\1\0\2\11\2\0"+
    "\1\11\3\0\2\150\2\0\2\231\101\0\1\11\1\0"+
    "\1\11\11\0\11\11\1\232\23\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\11\11\1\233\23\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\10\11\1\234\24\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\1\235\34\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\12\11\1\236\22\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\4\11\1\111\30\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\7\11\1\237\25\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\4\11\1\240\30\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\4\11\1\241\30\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\10\11\1\242\24\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\4\11\1\243\30\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\1\11\1\244\33\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\5\11\1\245\27\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\4\11\1\246\30\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\20\11\1\247\14\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\6\11\1\250\26\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\2\11\1\236\32\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\3\11\1\171\31\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\7\0\1\11\1\0\1\11"+
    "\11\0\2\11\1\251\32\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\3\0\2\11\2\0\2\177\35\0\1\252"+
    "\43\0\1\11\1\0\1\11\11\0\2\11\1\253\32\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\22\11\1\226\12\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\2\11\1\254\32\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\23\11\1\255\11\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\1\11\1\256\33\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\4\11\1\226\30\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\20\11\1\111\14\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\2\11\1\257\32\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\1\11\1\233\33\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\21\11\1\260\13\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\11\11\1\261\23\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\25\11\1\262\7\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\12\11\1\263\22\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\1\11\1\264\33\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\137\1\0\1\137\7\0\1\64\1\0\4\137"+
    "\1\217\25\137\1\265\2\137\1\0\1\137\1\153\11\0"+
    "\2\137\27\0\1\266\73\0\1\267\57\0\1\11\1\0"+
    "\1\11\11\0\3\11\1\237\31\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\25\11\1\270\7\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\25\11\1\111\7\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\150\1\0"+
    "\1\150\7\0\1\64\1\0\1\271\3\150\1\151\30\150"+
    "\1\0\1\150\1\153\1\0\2\11\2\0\1\11\3\0"+
    "\2\150\7\0\1\150\1\0\1\150\7\0\1\64\1\0"+
    "\4\150\1\151\15\150\1\272\12\150\1\0\1\150\1\153"+
    "\1\0\2\11\2\0\1\11\3\0\2\150\7\0\1\11"+
    "\1\0\1\11\11\0\12\11\1\273\22\11\1\0\1\11"+
    "\2\0\2\11\2\0\1\11\3\0\2\11\7\0\1\11"+
    "\1\0\1\11\11\0\10\11\1\274\24\11\1\0\1\11"+
    "\2\0\2\11\2\0\1\11\3\0\2\11\7\0\1\11"+
    "\1\0\1\11\11\0\1\275\34\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\25\11\1\276\7\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\11\11\1\226\23\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\30\11\1\277\4\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\5\11\1\300\27\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\21\11\1\301\13\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\12\11\1\302\22\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\4\11\1\303\30\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\3\11\1\304\31\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\27\11\1\305\5\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\12\11\1\306\22\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\1\11\1\307\33\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\33\0\1\310\51\0"+
    "\1\11\1\0\1\11\11\0\11\11\1\311\23\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\6\11\1\312\26\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\1\11\1\205\33\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\4\11\1\313\30\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\7\11\1\150\25\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\2\11\1\314\32\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\4\11\1\315\30\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\20\11\1\316\14\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\10\11\1\317\24\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\22\11\1\320\12\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\137\1\0\1\137\7\0\1\64\1\0\1\321\3\137"+
    "\1\217\30\137\1\0\1\137\1\153\11\0\2\137\53\0"+
    "\1\322\54\0\1\137\52\0\1\11\1\0\1\11\11\0"+
    "\11\11\1\111\23\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\7\0\1\150\1\0\1\150\7\0"+
    "\1\64\1\0\4\150\1\323\30\150\1\0\1\150\1\153"+
    "\1\0\2\11\2\0\1\11\3\0\2\150\7\0\1\150"+
    "\1\0\1\150\7\0\1\64\1\0\4\150\1\324\30\150"+
    "\1\0\1\150\1\153\1\0\2\11\2\0\1\11\3\0"+
    "\2\150\7\0\1\11\1\0\1\11\11\0\2\11\1\325"+
    "\32\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\11\1\0\1\11\11\0\1\307\34\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\11\11\1\326\23\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\12\11\1\327\22\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\11\11\1\330\23\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\22\11\1\331\12\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\4\11\1\307\30\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\13\11\1\332\21\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\7\11\1\333\25\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\10\11\1\334\24\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\3\11\1\335\31\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\7\0\1\11\1\0\1\11\11\0\5\11\1\111\27\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\11\3\0\2\11"+
    "\30\0\1\336\54\0\1\11\1\0\1\11\11\0\10\11"+
    "\1\337\24\11\1\0\1\11\2\0\2\11\2\0\1\11"+
    "\3\0\2\11\7\0\1\11\1\0\1\11\11\0\1\11"+
    "\1\340\33\11\1\0\1\11\2\0\2\11\2\0\1\11"+
    "\3\0\2\11\7\0\1\11\1\0\1\11\11\0\2\11"+
    "\1\341\32\11\1\0\1\11\2\0\2\11\2\0\1\11"+
    "\3\0\2\11\7\0\1\11\1\0\1\11\11\0\11\11"+
    "\1\301\23\11\1\0\1\11\2\0\2\11\2\0\1\11"+
    "\3\0\2\11\7\0\1\11\1\0\1\11\11\0\1\342"+
    "\34\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\11\1\0\1\11\11\0\22\11\1\343"+
    "\12\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\11\1\0\1\11\11\0\23\11\1\344"+
    "\11\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\11\1\0\1\11\11\0\3\11\1\345"+
    "\31\11\1\0\1\11\2\0\2\11\2\0\1\11\3\0"+
    "\2\11\7\0\1\137\1\0\1\137\7\0\1\64\1\0"+
    "\4\137\1\346\30\137\1\0\1\137\1\153\11\0\2\137"+
    "\34\0\1\347\50\0\1\150\1\0\1\150\7\0\1\64"+
    "\1\0\4\150\1\151\23\150\1\350\1\150\1\227\2\150"+
    "\1\0\1\150\1\153\1\0\2\11\2\0\1\11\3\0"+
    "\2\150\7\0\1\150\1\0\1\150\7\0\1\64\1\0"+
    "\4\150\1\151\25\150\1\351\2\150\1\0\1\150\1\153"+
    "\1\0\2\11\2\0\1\11\3\0\2\150\7\0\1\11"+
    "\1\0\1\11\11\0\1\340\34\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\13\11\1\352\21\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\20\11\1\353\14\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\10\11\1\354\24\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\3\11\1\355\31\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\2\11\1\356\32\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\4\11\1\357\30\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\4\11\1\360\30\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\27\0\1\361\55\0"+
    "\1\11\1\0\1\11\11\0\1\11\1\301\33\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\11\11\1\307\23\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\5\11\1\226\27\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\11\11\1\362\23\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\3\11\1\363\31\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\6\11\1\364\26\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\137\1\0\1\137\7\0\1\64\1\0\4\137\1\217"+
    "\23\137\1\365\1\137\1\265\2\137\1\0\1\137\1\153"+
    "\11\0\2\137\33\0\1\366\51\0\1\150\1\0\1\150"+
    "\7\0\1\64\1\0\4\150\1\151\4\150\1\367\23\150"+
    "\1\0\1\150\1\153\1\0\2\11\2\0\1\11\3\0"+
    "\2\150\7\0\1\150\1\0\1\150\7\0\1\64\1\0"+
    "\1\271\3\150\1\151\30\150\1\0\1\150\1\153\1\0"+
    "\2\11\1\370\1\0\1\11\3\0\2\150\7\0\1\11"+
    "\1\0\1\11\11\0\30\11\1\307\4\11\1\0\1\11"+
    "\2\0\2\11\2\0\1\11\3\0\2\11\7\0\1\11"+
    "\1\0\1\11\11\0\5\11\1\371\27\11\1\0\1\11"+
    "\2\0\2\11\2\0\1\11\3\0\2\11\7\0\1\11"+
    "\1\0\1\11\11\0\20\11\1\372\14\11\1\0\1\11"+
    "\2\0\2\11\2\0\1\11\3\0\2\11\7\0\1\11"+
    "\1\0\1\11\11\0\1\373\34\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\5\11\1\374\27\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\11\1\0"+
    "\1\11\11\0\5\11\1\340\27\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\2\0\2\375\101\0"+
    "\1\11\1\0\1\11\11\0\4\11\1\376\30\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\11\11\1\377\23\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\137\1\0\1\137\7\0\1\64\1\0\4\137\1\217"+
    "\4\137\1\u0100\23\137\1\0\1\137\1\153\11\0\2\137"+
    "\43\0\1\u0101\41\0\1\150\1\0\1\150\7\0\1\64"+
    "\1\0\4\150\1\151\3\150\1\u0102\24\150\1\0\1\150"+
    "\1\153\1\0\2\11\2\0\1\11\3\0\2\150\7\0"+
    "\1\11\1\0\1\11\11\0\10\11\1\u0103\24\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\5\11\1\u0104\27\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\4\11\1\237\30\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\7\0"+
    "\1\11\1\0\1\11\11\0\11\11\1\u0105\23\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\2\0"+
    "\2\375\36\0\1\u0106\42\0\1\11\1\0\1\11\11\0"+
    "\22\11\1\307\12\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\7\0\1\11\1\0\1\11\11\0"+
    "\4\11\1\u0107\30\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\7\0\1\137\1\0\1\137\7\0"+
    "\1\64\1\0\4\137\1\217\3\137\1\u0108\24\137\1\0"+
    "\1\137\1\153\11\0\2\137\30\0\1\u0109\54\0\1\150"+
    "\1\0\1\150\7\0\1\64\1\0\4\150\1\151\13\150"+
    "\1\u010a\14\150\1\0\1\150\1\153\1\0\2\11\2\0"+
    "\1\11\3\0\2\150\7\0\1\11\1\0\1\11\11\0"+
    "\31\11\1\362\3\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\7\0\1\11\1\0\1\11\5\0"+
    "\1\u010b\3\0\35\11\1\137\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\7\0\1\11\1\0\1\11\11\0"+
    "\3\11\1\u010c\31\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\2\11\30\0\1\u010d\54\0\1\11\1\0"+
    "\1\11\11\0\3\11\1\u010e\31\11\1\0\1\11\2\0"+
    "\2\11\2\0\1\11\3\0\2\11\7\0\1\137\1\0"+
    "\1\137\7\0\1\64\1\0\4\137\1\217\13\137\1\u010f"+
    "\14\137\1\0\1\137\1\153\11\0\2\137\17\0\1\u010b"+
    "\40\0\1\137\24\0\1\150\1\0\1\150\7\0\1\64"+
    "\1\0\4\150\1\151\1\u0110\27\150\1\0\1\150\1\153"+
    "\1\0\2\11\2\0\1\11\3\0\2\150\56\0\1\u0111"+
    "\45\0\1\u0112\56\0\1\137\1\0\1\137\7\0\1\64"+
    "\1\0\4\137\1\217\1\u0113\27\137\1\0\1\137\1\153"+
    "\11\0\2\137\7\0\1\150\1\0\1\150\5\0\1\u010b"+
    "\1\0\1\64\1\0\4\150\1\151\30\150\1\137\1\150"+
    "\1\153\1\0\2\11\2\0\1\11\3\0\2\150\57\0"+
    "\1\u0114\52\0\1\u0115\50\0\1\137\1\0\1\137\5\0"+
    "\1\u010b\1\0\1\64\1\0\4\137\1\217\32\137\1\153"+
    "\11\0\2\137\22\0\1\u0116\110\0\1\u0117\120\0\1\137"+
    "\46\0\1\u0118\67\0\1\u0119\106\0\1\u011a\74\0\1\u011b"+
    "\105\0\1\u011c\62\0\1\u011d\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15686];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\11\1\1\1\11\2\1\1\11\3\1\1\11"+
    "\1\1\1\11\21\1\2\11\4\1\3\11\3\1\1\0"+
    "\2\1\1\0\1\11\3\0\1\11\3\0\43\1\1\11"+
    "\2\1\1\0\1\1\2\0\11\1\1\0\23\1\1\0"+
    "\16\1\1\11\1\1\2\0\30\1\1\0\13\1\2\0"+
    "\20\1\1\0\11\1\1\0\13\1\1\0\10\1\1\0"+
    "\11\1\1\0\4\1\1\0\1\1\1\11\4\1\1\0"+
    "\3\1\1\0\4\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\2\0\1\1\11\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public TACLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TACLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return LEVEL;
            } 
            // fall through
          case 32: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 33: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 34: break;
          case 4: 
            { return OPERATORS;
            } 
            // fall through
          case 35: break;
          case 5: 
            { return NUMBER;
            } 
            // fall through
          case 36: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 37: break;
          case 7: 
            { return STRINGVAR;
            } 
            // fall through
          case 38: break;
          case 8: 
            { return LBRACKET;
            } 
            // fall through
          case 39: break;
          case 9: 
            { return RBRACKET;
            } 
            // fall through
          case 40: break;
          case 10: 
            { return AT;
            } 
            // fall through
          case 41: break;
          case 11: 
            { return COMMA;
            } 
            // fall through
          case 42: break;
          case 12: 
            { return COMPARATORS;
            } 
            // fall through
          case 43: break;
          case 13: 
            { return EQ;
            } 
            // fall through
          case 44: break;
          case 14: 
            { return COLON;
            } 
            // fall through
          case 45: break;
          case 15: 
            { return SEMICOLON;
            } 
            // fall through
          case 46: break;
          case 16: 
            { return SWITCH;
            } 
            // fall through
          case 47: break;
          case 17: 
            { return COMMENT;
            } 
            // fall through
          case 48: break;
          case 18: 
            { return STRING;
            } 
            // fall through
          case 49: break;
          case 19: 
            { return KEYWORDS;
            } 
            // fall through
          case 50: break;
          case 20: 
            { return PRIMITIVETYPE;
            } 
            // fall through
          case 51: break;
          case 21: 
            { return JAVATYPEHEAD;
            } 
            // fall through
          case 52: break;
          case 22: 
            { return BOOLS;
            } 
            // fall through
          case 53: break;
          case 23: 
            { return MODIFIER;
            } 
            // fall through
          case 54: break;
          case 24: 
            { return THROWS;
            } 
            // fall through
          case 55: break;
          case 25: 
            { return FIELDS;
            } 
            // fall through
          case 56: break;
          case 26: 
            { return EXTENDS;
            } 
            // fall through
          case 57: break;
          case 27: 
            { return METHODS;
            } 
            // fall through
          case 58: break;
          case 28: 
            { return LVLINDEX;
            } 
            // fall through
          case 59: break;
          case 29: 
            { return IMPLEMENTS;
            } 
            // fall through
          case 60: break;
          case 30: 
            { return ATTRIBUTES;
            } 
            // fall through
          case 61: break;
          case 31: 
            { return INSTRUCTIONHEAD;
            } 
            // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
