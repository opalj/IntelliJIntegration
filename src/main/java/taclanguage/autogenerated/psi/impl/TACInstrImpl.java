/*
 *  BSD 2-Clause License - see ./LICENSE for details.
 */

// This is a generated file. Not intended for manual editing.
package taclanguage.autogenerated.psi.impl;

import java.util.List;
import org.jetbrains.annotations.*;
import com.intellij.lang.ASTNode;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiElementVisitor;
import com.intellij.psi.util.PsiTreeUtil;
import static taclanguage.autogenerated.psi.TAC_elementTypeHolder.*;
import com.intellij.extapi.psi.ASTWrapperPsiElement;
import taclanguage.autogenerated.psi.*;
import taclanguage.psi.impl.TAC_parserParserUtil;

public class TACInstrImpl extends ASTWrapperPsiElement implements TACInstr {

  public TACInstrImpl(@NotNull ASTNode node) {
    super(node);
  }

  public void accept(@NotNull TACVisitor visitor) {
    visitor.visitInstr(this);
  }

  public void accept(@NotNull PsiElementVisitor visitor) {
    if (visitor instanceof TACVisitor) accept((TACVisitor)visitor);
    else super.accept(visitor);
  }

  @Override
  @NotNull
  public List<TACGotoInst> getGotoInstList() {
    return PsiTreeUtil.getChildrenOfTypeAsList(this, TACGotoInst.class);
  }

  @Override
  @NotNull
  public List<TACIfInst> getIfInstList() {
    return PsiTreeUtil.getChildrenOfTypeAsList(this, TACIfInst.class);
  }

  @Override
  @NotNull
  public List<TACSwitchInst> getSwitchInstList() {
    return PsiTreeUtil.getChildrenOfTypeAsList(this, TACSwitchInst.class);
  }

}
