// This is a generated file. Not intended for manual editing.
package org.opalj.intellijintegration.taclanguage.autogenerated.psi.impl;

import static org.opalj.intellijintegration.taclanguage.autogenerated.psi.TAC_elementTypeHolder.*;

import com.intellij.extapi.psi.ASTWrapperPsiElement;
import com.intellij.lang.ASTNode;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiElementVisitor;
import org.jetbrains.annotations.*;
import org.opalj.intellijintegration.taclanguage.autogenerated.psi.*;

public class TACInstrImpl extends ASTWrapperPsiElement implements TACInstr {

  public TACInstrImpl(@NotNull ASTNode node) {
    super(node);
  }

  public void accept(@NotNull TACVisitor visitor) {
    visitor.visitInstr(this);
  }

  public void accept(@NotNull PsiElementVisitor visitor) {
    if (visitor instanceof TACVisitor) accept((TACVisitor) visitor);
    else super.accept(visitor);
  }

  @Override
  @Nullable
  public TACCastIntr getCastIntr() {
    return findChildByClass(TACCastIntr.class);
  }

  @Override
  @Nullable
  public TACCaughtInst getCaughtInst() {
    return findChildByClass(TACCaughtInst.class);
  }

  @Override
  @Nullable
  public TACEQInstr getEQInstr() {
    return findChildByClass(TACEQInstr.class);
  }

  @Override
  @Nullable
  public TACMethodCallOrNEWInstr getMethodCallOrNEWInstr() {
    return findChildByClass(TACMethodCallOrNEWInstr.class);
  }

  @Override
  @Nullable
  public TACMonitorInst getMonitorInst() {
    return findChildByClass(TACMonitorInst.class);
  }

  @Override
  @Nullable
  public TACGotoInst getGotoInst() {
    return findChildByClass(TACGotoInst.class);
  }

  @Override
  @Nullable
  public TACIfInst getIfInst() {
    return findChildByClass(TACIfInst.class);
  }

  @Override
  @Nullable
  public TACSwitchInst getSwitchInst() {
    return findChildByClass(TACSwitchInst.class);
  }

  @Override
  @Nullable
  public PsiElement getKeywords() {
    return findChildByType(KEYWORDS);
  }

  @Override
  @Nullable
  public PsiElement getLevel() {
    return findChildByType(LEVEL);
  }
}
