/*
 *  BSD 2-Clause License - see ./LICENSE for details.
 */

package org.opalj.intellijintegration.taclanguage.syntaxhighlighter;

import static com.intellij.openapi.editor.colors.TextAttributesKey.createTextAttributesKey;

import com.intellij.lexer.Lexer;
import com.intellij.openapi.editor.*;
import com.intellij.openapi.editor.colors.TextAttributesKey;
import com.intellij.openapi.fileTypes.SyntaxHighlighterBase;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.tree.TokenSet;
import java.util.HashMap;
import java.util.Map;
import org.jetbrains.annotations.NotNull;
import org.opalj.intellijintegration.taclanguage.autogenerated.lexer.TAC_lexerAdapter;
import org.opalj.intellijintegration.taclanguage.autogenerated.psi.TAC_elementTypeHolder;

public class TAC_syntaxHighlighter extends SyntaxHighlighterBase {
  private static final Map<IElementType, TextAttributesKey> ourMap;
  // Java keywords
  static final TextAttributesKey TYPE =
      createTextAttributesKey("TAC_TYPE", DefaultLanguageHighlighterColors.KEYWORD);
  // comments (includes block comments)
  public static final TextAttributesKey COMMENT =
      createTextAttributesKey("TAC_COMMENT", DefaultLanguageHighlighterColors.LINE_COMMENT);
  // misc
  public static final TextAttributesKey NUMBER =
      createTextAttributesKey("TAC_NUMBER", DefaultLanguageHighlighterColors.NUMBER);
  public static final TextAttributesKey STRING =
      createTextAttributesKey("TAC_STRING", DefaultLanguageHighlighterColors.STRING);
  static final TextAttributesKey LEVEL =
      createTextAttributesKey("TAC_LEVELC", DefaultLanguageHighlighterColors.CONSTANT);

  static final TextAttributesKey ANNOTATION =
      createTextAttributesKey("TAC_ANNOTATION", DefaultLanguageHighlighterColors.METADATA);

  static {
    ourMap = new HashMap<>();
    // TODO: doesn't work for annotations, because they're not TokenTypes...
    TokenSet annotationSet = TokenSet.create(TAC_elementTypeHolder.ANNOTATION);
    fillMap(ourMap, annotationSet, DefaultLanguageHighlighterColors.METADATA);

    TokenSet keywords =
        TokenSet.create(
            TAC_elementTypeHolder.PRIMITIVETYPE,
            TAC_elementTypeHolder.MODIFIER,
            TAC_elementTypeHolder.JAVATYPEHEAD,
            TAC_elementTypeHolder.EXTENDS,
            TAC_elementTypeHolder.IMPLEMENTS,
            TAC_elementTypeHolder.THROWS
            // TAC_elementTypeHolder.CASE,
            //                    TAC_elementTypeHolder.BOOLS
            );
    fillMap(ourMap, keywords, DefaultLanguageHighlighterColors.KEYWORD);

    ourMap.put(TAC_elementTypeHolder.COMMENT, DefaultLanguageHighlighterColors.LINE_COMMENT);
    ourMap.put(TAC_elementTypeHolder.LEVEL, DefaultLanguageHighlighterColors.CONSTANT);
    ourMap.put(TAC_elementTypeHolder.NUMBER, DefaultLanguageHighlighterColors.NUMBER);
    ourMap.put(TAC_elementTypeHolder.STRING, DefaultLanguageHighlighterColors.STRING);
    ourMap.put(TokenType.BAD_CHARACTER, HighlighterColors.BAD_CHARACTER);
  }

  @NotNull
  @Override
  public Lexer getHighlightingLexer() {
    return new TAC_lexerAdapter();
  }

  @NotNull
  @Override
  public TextAttributesKey[] getTokenHighlights(IElementType tokenType) {
    return pack(ourMap.get(tokenType));
  }
}
