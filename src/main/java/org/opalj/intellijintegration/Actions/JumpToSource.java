/*
 *  BSD 2-Clause License - see ./LICENSE for details.
 */

package org.opalj.intellijintegration.Actions;

import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import com.intellij.openapi.editor.Document;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.fileEditor.FileEditorManager;
import com.intellij.openapi.fileEditor.OpenFileDescriptor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.*;
import com.intellij.psi.util.PsiTreeUtil;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;
import org.opalj.intellijintegration.JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeClassHead;
import org.opalj.intellijintegration.JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeInstructionBody;
import org.opalj.intellijintegration.JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeJType;

/** Jumps from a given Instruction to the source file and set the caret to given line number */
public class JumpToSource extends AnAction {
  private Project project;
  private PsiFile psiFile, resolvePsiFile;
  private int lineNumber;

  @Override
  public void update(@NotNull AnActionEvent e) {
    project = e.getProject();
    Editor editor = e.getData(CommonDataKeys.EDITOR);
    psiFile = e.getData(CommonDataKeys.PSI_FILE);
    if (project == null || editor == null || psiFile == null) return;
    final String extension = ActionUtil.ExtString(e);
    PsiElement elementAt =
        Objects.requireNonNull(psiFile)
            .findElementAt(Objects.requireNonNull(editor).getCaretModel().getOffset());
    JavaByteCodeInstructionBody parent =
        PsiTreeUtil.getParentOfType(elementAt, JavaByteCodeInstructionBody.class);
    if ("jbc".equals(extension) && parent != null) {
      e.getPresentation().setVisible(true);
      lineNumber =
          Integer.parseInt(Objects.requireNonNull(parent).getLineNumber().getNumber().getText());
      e.getPresentation().setEnabled(!(lineNumber == 0));
      for (PsiElement child : psiFile.getChildren()) {
        if (child instanceof JavaByteCodeClassHead
            && ((JavaByteCodeClassHead) child).getJTypeList().size() > 0) {
          JavaByteCodeJType fullyQualifiedClass =
              ((JavaByteCodeClassHead) child).getJTypeList().get(0);
          // e.g. java.lang.String -> resolve = String
          PsiElement resolve =
              fullyQualifiedClass.getReferences()[fullyQualifiedClass.getReferences().length - 1]
                  .resolve();
          resolve = resolve != null ? resolve.getNavigationElement() : null;
          if (resolve != null) {
            resolvePsiFile = Objects.requireNonNull(resolve).getContainingFile();
            e.getPresentation()
                .setEnabled(!"class".equals(resolvePsiFile.getFileType().getDefaultExtension()));
          }
        }
      }
    } else e.getPresentation().setVisible(false);
  }

  @Override
  public void actionPerformed(@NotNull AnActionEvent e) {
    VirtualFile resolvedVirtualFile = resolvePsiFile.getVirtualFile();
    Document document = PsiDocumentManager.getInstance(project).getDocument(resolvePsiFile);
    int lineStartOffset = Objects.requireNonNull(document).getLineStartOffset(lineNumber - 1);
    FileEditorManager.getInstance(project)
        .openTextEditor(
            new OpenFileDescriptor(project, resolvedVirtualFile, lineStartOffset), true);
  }
}
