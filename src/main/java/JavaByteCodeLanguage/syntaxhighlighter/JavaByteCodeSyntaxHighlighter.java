package JavaByteCodeLanguage.syntaxhighlighter;

import static com.intellij.openapi.editor.colors.TextAttributesKey.createTextAttributesKey;

import JavaByteCodeLanguage.autoGenerated.Lexer.JavaByteCodeLexerAdapter;
import JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeTypes;
import com.intellij.lexer.Lexer;
import com.intellij.openapi.editor.DefaultLanguageHighlighterColors;
import com.intellij.openapi.editor.HighlighterColors;
import com.intellij.openapi.editor.colors.TextAttributesKey;
import com.intellij.openapi.fileTypes.SyntaxHighlighter;
import com.intellij.openapi.fileTypes.SyntaxHighlighterBase;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;

/** @see SyntaxHighlighter */
class JavaByteCodeSyntaxHighlighter extends SyntaxHighlighterBase {

  // Java keywords
  private static final TextAttributesKey MODIFIER =
      createTextAttributesKey("JBC_MODIFIER", DefaultLanguageHighlighterColors.KEYWORD);
  static final TextAttributesKey TYPE =
      createTextAttributesKey("JBC_TYPE", DefaultLanguageHighlighterColors.KEYWORD);
  private static final TextAttributesKey JAVATYPEHEAD =
      createTextAttributesKey("JBC_JAVATYPEHEAD", DefaultLanguageHighlighterColors.KEYWORD);
  private static final TextAttributesKey EXTENDS =
      createTextAttributesKey("JBC_EXTENDS", DefaultLanguageHighlighterColors.KEYWORD);
  private static final TextAttributesKey IMPLEMENTS =
      createTextAttributesKey("JBC_IMPLEMENTS", DefaultLanguageHighlighterColors.KEYWORD);
  private static final TextAttributesKey THROWS =
      createTextAttributesKey("JBC_THROWS", DefaultLanguageHighlighterColors.KEYWORD);
  private static final TextAttributesKey CASE =
      createTextAttributesKey("JBC_CASE", DefaultLanguageHighlighterColors.KEYWORD);
  private static final TextAttributesKey BOOLS =
      createTextAttributesKey("JBC_BOOLS", DefaultLanguageHighlighterColors.KEYWORD);

  // comments (includes block comments)
  public static final TextAttributesKey COMMENT =
      createTextAttributesKey("JBC_COMMENT", DefaultLanguageHighlighterColors.LINE_COMMENT);

  // misc
  public static final TextAttributesKey NUMBER =
      createTextAttributesKey("JBC_NUMBER", DefaultLanguageHighlighterColors.NUMBER);
  private static final TextAttributesKey BAD_CHARACTER =
      createTextAttributesKey("JBC_BAD_CHARACTER", HighlighterColors.BAD_CHARACTER);
  public static final TextAttributesKey STRING =
      createTextAttributesKey("JBC_STRING", DefaultLanguageHighlighterColors.STRING);
  public static final TextAttributesKey MNEMONIC =
      createTextAttributesKey("JBC_MNEMONIC", DefaultLanguageHighlighterColors.CONSTANT);

  static final TextAttributesKey ANNOTATION =
      createTextAttributesKey("JBC_ANNOTATION", DefaultLanguageHighlighterColors.METADATA);

  private static final TextAttributesKey[] BAD_CHAR_KEYS = new TextAttributesKey[] {BAD_CHARACTER};
  private static final TextAttributesKey[] NUMBER_KEYS = new TextAttributesKey[] {NUMBER};
  private static final TextAttributesKey[] COMMENT_KEYS = new TextAttributesKey[] {COMMENT};
  private static final TextAttributesKey[] STRING_KEYS = new TextAttributesKey[] {STRING};
  private static final TextAttributesKey[] MNEMONIC_KEYS = new TextAttributesKey[] {MNEMONIC};
  private static final TextAttributesKey[] JAVA_KEYWORD_KEYS =
      new TextAttributesKey[] {TYPE, MODIFIER, JAVATYPEHEAD, EXTENDS, IMPLEMENTS, THROWS, CASE, BOOLS};
  private static final TextAttributesKey[] EMPTY_KEYS = new TextAttributesKey[0];
  private static final TextAttributesKey[] ANNOTATION_KEYS = new TextAttributesKey[] {ANNOTATION};

  @NotNull
  @Override
  public Lexer getHighlightingLexer() {
    return new JavaByteCodeLexerAdapter();
  }

  @NotNull
  @Override
  public TextAttributesKey[] getTokenHighlights(IElementType tokenType) {
    if (tokenType.equals(JavaByteCodeTypes.COMMENT)) {
      return COMMENT_KEYS;
    } else if (tokenType.equals(JavaByteCodeTypes.ANNOTATION)) {
      // TODO: only works for tokens
      return ANNOTATION_KEYS;
    } else if (tokenType.equals(JavaByteCodeTypes.MNEMONIC)) {
      return MNEMONIC_KEYS;
    } else if (tokenType.equals(JavaByteCodeTypes.NUMBER)) {
      return NUMBER_KEYS;
    } else if (tokenType.equals(JavaByteCodeTypes.STRING)) {
      return STRING_KEYS;
    } else if (tokenType.equals(TokenType.BAD_CHARACTER)) {
      return BAD_CHAR_KEYS;
    } else if (tokenType.equals(JavaByteCodeTypes.PRIMITIVETYPE)
        || tokenType.equals(JavaByteCodeTypes.MODIFIER)
        || tokenType.equals(JavaByteCodeTypes.JAVATYPEHEAD)
        || tokenType.equals(JavaByteCodeTypes.EXTENDS)
        || tokenType.equals(JavaByteCodeTypes.IMPLEMENTS)
        || tokenType.equals(JavaByteCodeTypes.THROWS)
        || tokenType.equals(JavaByteCodeTypes.CASE)
        || tokenType.equals(JavaByteCodeTypes.BOOLS)) {
      return JAVA_KEYWORD_KEYS;
    } else {
      return EMPTY_KEYS;
    }
  }
}
