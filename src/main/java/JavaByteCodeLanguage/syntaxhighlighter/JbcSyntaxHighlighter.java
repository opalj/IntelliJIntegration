package JavaByteCodeLanguage.syntaxhighlighter;

import JavaByteCodeLanguage.autoGenerated.Lexer.JavaByteCodeLexerAdapter;
import JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeTypes;
import com.intellij.ide.highlighter.JavaHighlightingColors;
import com.intellij.lexer.Lexer;
import com.intellij.openapi.editor.DefaultLanguageHighlighterColors;
import com.intellij.openapi.editor.HighlighterColors;
import com.intellij.openapi.editor.colors.TextAttributesKey;
import com.intellij.openapi.fileTypes.SyntaxHighlighterBase;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.tree.TokenSet;
import org.jetbrains.annotations.NotNull;

import java.util.HashMap;
import java.util.Map;

public class JbcSyntaxHighlighter extends SyntaxHighlighterBase {

    private static final Map<IElementType, TextAttributesKey> ourMap;

    static {
        ourMap = new HashMap<>();

        TokenSet annotationSet = TokenSet.create(JavaByteCodeTypes.AT, JavaByteCodeTypes.STRINGVAR);
        fillMap(ourMap, annotationSet, DefaultLanguageHighlighterColors.METADATA);

        TokenSet keywords = TokenSet.create(
            JavaByteCodeTypes.PRIMITIVETYPE,
            JavaByteCodeTypes.MODIFIER,
            JavaByteCodeTypes.JAVATYPEHEAD,
            JavaByteCodeTypes.EXTENDS,
            JavaByteCodeTypes.IMPLEMENTS,
            JavaByteCodeTypes.THROWS,
            JavaByteCodeTypes.CASE
        );
        fillMap(ourMap, keywords, DefaultLanguageHighlighterColors.KEYWORD);


        ourMap.put(JavaByteCodeTypes.COMMENT, DefaultLanguageHighlighterColors.LINE_COMMENT);
        ourMap.put(JavaByteCodeTypes.MNEMONIC, DefaultLanguageHighlighterColors.CONSTANT);
        ourMap.put(JavaByteCodeTypes.NUMBER, DefaultLanguageHighlighterColors.NUMBER);
        ourMap.put(JavaByteCodeTypes.STRING, DefaultLanguageHighlighterColors.STRING);
        ourMap.put(TokenType.BAD_CHARACTER, HighlighterColors.BAD_CHARACTER);

    }

    @NotNull
    @Override
    public Lexer getHighlightingLexer() {
        return new JavaByteCodeLexerAdapter();
    }

    @NotNull
    @Override
    public TextAttributesKey[] getTokenHighlights(IElementType tokenType) {
        return pack(ourMap.get(tokenType));
    }
}
