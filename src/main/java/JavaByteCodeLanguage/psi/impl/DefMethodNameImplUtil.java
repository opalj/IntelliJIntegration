package JavaByteCodeLanguage.psi.impl;

import JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeDefMethodName;
import JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeTypes;
import com.intellij.lang.ASTNode;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiNameIdentifierOwner;
import com.intellij.psi.PsiReference;
import com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

class DefMethodNameImplUtil {

  /**
   * @see PsiElement#getReferences() for details
   * @param element an invoked method in our JavaByteCode-Editor
   * @return the Java-references to this method
   */
  @NotNull
  public static PsiReference[] getReferences(JavaByteCodeDefMethodName element) {
    return ReferenceProvidersRegistry.getReferencesFromProviders(element);
  }

  public static String getName(JavaByteCodeDefMethodName element) {
    return getStringVar(element);
  }

  /**
   * @param element an invoked method, e.g. println in java.io.PrintStream { void println() }
   * @return the name of the method as a String (e.g. "println")
   */
  @Nullable
  static String getStringVar(@NotNull JavaByteCodeDefMethodName element) {
    ASTNode stringVarNode = element.getNode().findChildByType(JavaByteCodeTypes.STRINGVAR);
    if (stringVarNode != null) {
      // IMPORTANT: Convert embedded escaped spaces to simple spaces
      return stringVarNode.getText().replaceAll("\\\\", " ");
    }

    return null;
  }

  /** @see PsiNameIdentifierOwner#getNameIdentifier() */
  @Nullable
  public static PsiElement getNameIdentifier(@NotNull JavaByteCodeDefMethodName element) {
    ASTNode keyNode = element.getNode().findChildByType(JavaByteCodeTypes.STRINGVAR);
    if (keyNode != null) {
      return keyNode.getPsi();
    } else {
      return null;
    }
  }
}
