package JavaByteCodeLanguage.psi.impl;

import JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeJType;
import com.intellij.lang.ASTNode;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiNameIdentifierOwner;
import com.intellij.psi.PsiReference;
import com.intellij.psi.impl.source.resolve.reference.impl.providers.JavaClassReferenceProvider;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.logging.Level;
import java.util.logging.Logger;

public class JTypeImplUtil {

    private static final Logger LOGGER = Logger.getLogger(JavaByteCodePsiImplUtil.class.getName());

    /**
     * @see PsiElement#getReferences() for details
     * @param element a class type (as FQN, e.g. java.lang.String)
     * @return the references to each element in the FQN (e.g. ["java", "lang", "String"])
     */
    public static PsiReference[] getReferences(JavaByteCodeJType element) {
        JavaClassReferenceProvider provider = new JavaClassReferenceProvider();
        try {
            return provider.getReferencesByString(element.getName(), element, 0);
        } catch (Exception e) {
            try{ return element.getReferences();}
            catch(StackOverflowError soe){
                LOGGER.log(Level.SEVERE,soe.toString(),soe);
                return null;
            }
        }
    }

    public static String getName(JavaByteCodeJType element) {
        return getJavaType(element);
    }

    /**
     * @param element a Java type, i.e. a class type (e.g. java.lang.String)
     * @return the String representation of the type
     */
    @Nullable
    public static String getJavaType(@NotNull JavaByteCodeJType element) {
        ASTNode javaTypeNode = element.getNode();
        if (javaTypeNode != null) {
            // IMPORTANT: Convert embedded escaped spaces to simple spaces
            return javaTypeNode.getText().replaceAll("\\\\ ", " ");
        }

        return null;
    }

    /** @see PsiNameIdentifierOwner#getNameIdentifier() */
    @Nullable
    public static PsiElement getNameIdentifier(@NotNull JavaByteCodeJType element) {
        ASTNode keyNode = element.getNode();
        if (keyNode != null) {
            return keyNode.getPsi();
        } else {
            return null;
        }
    }
}
