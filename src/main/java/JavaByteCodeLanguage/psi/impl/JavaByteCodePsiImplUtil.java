package JavaByteCodeLanguage.psi.impl;

import JavaByteCodeLanguage.psi.*;
import com.intellij.lang.ASTNode;
import com.intellij.psi.*;
import com.intellij.psi.impl.source.resolve.reference.ReferenceProvidersRegistry;
import com.intellij.psi.impl.source.resolve.reference.impl.providers.JavaClassReferenceProvider;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * A utility class that serves as a delegate for our PSI-elements
 * that are automatically generated by the parser.
 *
 * (In the grammar, see JavaByteCode.bnf file, we can define methods for selected tree elements.
 * Since they are generated by the parser, we delegate the implementations to this utility class,
 * so that the definitions aren't lost when re-generating the code.)
 */
public class JavaByteCodePsiImplUtil {

  /**
   *
   * @param element a Java type, i.e. a class type (e.g. java.lang.String)
   * @return the String representation of the type
   */
  @Nullable
  public static String getJavaType(@NotNull JavaByteCodeJType element) {
    ASTNode javaTypeNode = element.getNode().findChildByType(JavaByteCodeTypes.JAVATYPE);
    if (javaTypeNode != null) {
      // IMPORTANT: Convert embedded escaped spaces to simple spaces
      return javaTypeNode.getText().replaceAll("\\\\ ", " ");
    }

    return null;
  }


  /**
   *
   * @param element an invoked method, e.g. println in java.io.PrintStream { void println() }
   * @return the name of the method as a String (e.g. "println")
   */
  @Nullable
  public static String getStringVar(@NotNull JavaByteCodeDefMethodName element) {
    ASTNode stringVarNode = element.getNode().findChildByType(JavaByteCodeTypes.STRINGVAR);
    if (stringVarNode != null) {
      // IMPORTANT: Convert embedded escaped spaces to simple spaces
      return stringVarNode.getText().replaceAll("\\\\", " ");
    }

    return null;
  }

  public static String getName(JavaByteCodeJType element) {
    return getJavaType(element);
  }

  public static String getName(JavaByteCodeDefMethodName element) {
    return getStringVar(element);
  }

  /**
   * @see PsiNamedElement#setName
   */
  public static PsiElement setName(@NotNull JavaByteCodeJType element, String newName) {
    ASTNode keyNode = element.getNode().findChildByType(JavaByteCodeTypes.JAVATYPE);
    if (keyNode != null) {
      JavaByteCodeType type = JavaByteCodeElementFactory.createType(element.getProject(), newName);
      ASTNode newKeyNode = type.getFirstChild().getNode();
      element.getNode().replaceChild(keyNode, newKeyNode);
    }
    return element;
  }

  /**
   * @see PsiNamedElement#setName
   */
  public static PsiElement setName(@NotNull JavaByteCodeDefMethodName element, String newName) {
    ASTNode keyNode = element.getNode().findChildByType(JavaByteCodeTypes.STRINGVAR);
    if (keyNode != null) {
      JavaByteCodeMethodName property =
          JavaByteCodeElementFactory.createMethodName(element.getProject(), newName);
      ASTNode newKeyNode = property.getFirstChild().getNode();
      element.getNode().replaceChild(keyNode, newKeyNode);
    }
    return element;
  }


  /**
   * @see PsiNameIdentifierOwner#getNameIdentifier()
   */
  @Nullable
  public static PsiElement getNameIdentifier(@NotNull JavaByteCodeJType element) {
    ASTNode keyNode = element.getNode().findChildByType(JavaByteCodeTypes.JAVATYPE);
    if (keyNode != null) {
      return keyNode.getPsi();
    } else {
      return null;
    }
  }

  /**
   * @see PsiNameIdentifierOwner#getNameIdentifier()
   */
  @Nullable
  public static PsiElement getNameIdentifier(@NotNull JavaByteCodeDefMethodName element) {
    ASTNode keyNode = element.getNode().findChildByType(JavaByteCodeTypes.STRINGVAR);
    if (keyNode != null) {
      return keyNode.getPsi();
    } else {
      return null;
    }
  }

  /**
   * @see PsiElement#getReferences() for further details
   *
   * TODO: handle this in a Provider as well?
   *    @see com.intellij.psi.PsiReferenceRegistrar for further details
   *
   * @param element a class type (as FQN, e.g. java.lang.String)
   * @return the references to each element in the FQN (e.g. ["java", "lang", "String"])
   */
  public static PsiReference[] getReferences(JavaByteCodeJType element) {
    JavaClassReferenceProvider provider = new JavaClassReferenceProvider();
    try {
      return provider.getReferencesByString(element.getName(), element, 0);
    } catch (Exception e) {
      return element.getReferences();
    }
  }

  /**
   * @see PsiElement#getReferences() for further details
   *
   * @param element an invoked method in our JavaByteCode-Editor
   * @return the Java-references to this method
   */
  @NotNull
  public static PsiReference[] getReferences(JavaByteCodeDefMethodName element) {
    return ReferenceProvidersRegistry.getReferencesFromProviders(element);
  }
}
