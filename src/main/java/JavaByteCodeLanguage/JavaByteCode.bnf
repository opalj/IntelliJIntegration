{
  parserClass="JavaByteCodeLanguage.autoGenerated.parser.JavaByteCodeParser"
  parserUtilClass="JavaByteCodeLanguage.autoGenerated.parser.JavaByteCodeParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="JavaByteCode"
  psiImplClassSuffix="Impl"
  psiPackage="JavaByteCodeLanguage.autoGenerated.psi"
  psiImplPackage="JavaByteCodeLanguage.autoGenerated.psi.impl"

  elementTypeHolderClass="JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeTypes"
  elementTypeClass="JavaByteCodeLanguage.psi.JavaByteCodeElementType"
  tokenTypeClass="JavaByteCodeLanguage.psi.JavaByteCodeTokenType"
  //implements("") = "org.intellij.lang."
  tokens=[
  COMMENT='regexp://.*'
  BLOCK_COMMENT="regexp:/\*[^\*/]*\*/"
  NUMBER ='regexp:(-)?\d+(\.\d*)?'
  STRING="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

  //MNEMONIC="regexp:A(A)?(CONST_NULL|LOAD|STORE)(_\d)?|(I)(CONST|LOAD|STORE)(_M?\d)?|(I|L|F|D|A)?RETURN|INVOKE(SPECIAL|STATIC|VIRTUAL)|DUP|NOP|IF(EQ|NE|LT|GE|GT|LE|_ICMP(EQ|NE|LT|GE|GT|LE)|_ACMP(EQ|NE))|IINC|ARRAYLENGTH|GOTO|NEW|CHECKCAST"

     // @see https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings
     // important: order matters !!! e.g. ILOAD_0 must come before ILOAD,
     //      or ILOAD will incorrectly match first for ILOAD[_0]
     MNEMONIC="regexp:AALOAD|AASTORE|ACONST_NULL|ALOAD_0|ALOAD_1|ALOAD_2|ALOAD_3|ALOAD|\
                       |ANEWARRAY|ARETURN|ARRAYLENGTH|ASTORE_0|ASTORE_1|ASTORE_2|ASTORE_3|ASTORE|\
                       |ATHROW|BALOAD|BASTORE|BIPUSH|BREAKPOINT|CALOAD|CASTORE|CHECKCAST|\
                       |D2F|D2I|DADD|DALOAD|DASTORE|DCMPG|DCMPL|DCONST_0|DCONST_1|DDIV|\
                       |DLOAD_0|DLOAD_1|DLOAD_2|DLOAD_3|DLOAD|DMUL|DNEG|DREM|DRETURN|\
                       |DSTORE_0|DSTORE_1|DSTORE_2|DSTORE_3|DSTORE|DSUB|DUP|DUP_X1|DUP_X2|\
                       |DUP2|DUP2_X1|DUP2_X2|F2D|F2I|F2L|FADD|FALOAD|FASTORE|FCMPG|FCMPL|\
                       |FCONST_0|FCONST_1|FCONST_2|FDIV|FLOAD_0|FLOAD_1|FLOAD_2|FLOAD_3|FLOAD|\
                       |FMUL|FNEG|FREM|FRETURN|FSTORE_0|FSTORE_1|FSTORE_2|FSTORE_3|FSTORE|FSUB|\
                       |GOTO|GOTO_W|I2B|I2C|I2D|I2F|I2L|I2S|IADD|IALOAD|IAND|IASTORE|ICONST_M1|\
                       |ICONST_0|ICONST_1|ICONST_2|ICONST_3|ICONST_4|ICONST_5|IDIV|IF_ACMPEQ|\
                       |IF_ACMPNE|IF_ICMPEQ|IF_ICMPGE|IF_ICMPGT|IF_ICMPLE|IF_ICMPLT|IF_ICMPNE|\
                       |IFEQ|IFGE|IFGT|IFLE|IFLT|IFNE|IFNONNULL|IFNULL|IINC|\
                       |ILOAD_0|ILOAD_1|ILOAD_2|ILOAD_3|ILOAD|IMPDEP1|IMPDEP2|IMUL|INEG|INSTANCEOF|\
                       |INVOKEDYNAMIC|INVOKEINTERFACE|INVOKESPECIAL|INVOKESTATIC|INVOKEVIRTUAL|\
                       |IOR|IREM|IRETURN|ISHL|ISHR|ISTORE_0|ISTORE_1|ISTORE_2|ISTORE_3|ISTORE|\
                       |ISUB|IUSHR|IXOR|JSR|JSR_W|L2D|L2F|L2I|LADD|LALOAD|LAND|LASTORE|LCMP|\
                       |LCONST_0|LCONST_1|LDC|LDC_W|LDC2_W|LDIV|\
                       |LLOAD_0|LLOAD_1|LLOAD_2|LLOAD_3|LLOAD|LMUL|LNEG|LOOKUPSWITCH|LOR|LREM|\
                       |LRETURN|LSHL|LSTORE_0|LSTORE_1|LSTORE_2|LSTORE_3|LSTORE|LSUB|LUSHR|LXOR|\
                       |MONITORENTER|MONITOREXIT|MULTIANEWARRAY|NEW|NEWARRAY|NOP|POP|POP2|\
                       |RETURN|RET|SALOAD|SASTORE|SIPUSH|SWAP|TABLESWITCH|WIDE|\
                       |GETFIELD|GETSTATIC|GET|PUTFIELD|PUTSTATIC|PUT"

  // CONST
  SPACE='regexp:\s+'
  COMMA=","
  DOT="."
  COLON=":"
  AT="@"
  TO="regexp:>|=>"
  LBRACKET="regexp:\(|\{|\[|«|\u00ab"
  RBRACKET="regexp:\)|\}|\]|»|\u00bb"
  CONSTMETHODNAMES = "regexp:<(cl)?init>"

  LOAD_INSTR="regexp:Load([A-Za-z]+)"
  //JAVACONST
  CLASS='class'
  EXTENDS='extends'
  IMPLEMENTS='implements'
  FIELDS='Fields'
  // TYPES
  PRIMITIVETYPE="regexp:void|boolean|byte|char|short|int|long|float|double"
  MODIFIER="regexp:public|private|protected|default|static|final|abstract|synchronized|native|strictfp|volatile"
  //PREMODIFIER="regexp:public|private|protected|default"
  EOF = "\n"
  STRINGVAR = "regexp:[a-zA-Z$_][a-zA-Z0-9$_]*"

   // PUT_GET_INSTR="regexp:(put|get) .* :"
  ]

  psiImplUtilClass="JavaByteCodeLanguage.psi.impl.JavaByteCodePsiImplUtil"

//  mixin("JAVATYPE")="JavaByteCodeLanguage.autoGenerated.psi.impl.JavaByteCodeNamedElementImpl"
//        implements="JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeNamedElement"
//        methods=[getKey getValue getName setName getNameIdentifier getReferences]
}
jbcFile ::=  item_

private item_ ::= ClassHead FieldsDeclaration Methods MethodDeclaration*

ClassHead ::= ModifierV? ("@"?)(class|enum|interface) BLOCK_COMMENT* JType (extends JType)? (implements (JType(",")?)+)?

// generic stuff

ModifierV ::= MODIFIER*

Type ::= (LambdaType | JType | PRIMITIVETYPE)('[]')*
JType ::= (STRINGVAR'.')*STRINGVAR  {mixin="JavaByteCodeLanguage.autoGenerated.psi.impl.JavaByteCodeNamedElementImpl"
                    implements="JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeNamedElement"
                    methods=[getJavaType getName setName getNameIdentifier getReferences]}

LambdaType ::= (STRINGVAR'.')*STRINGVAR lambdaParams STRINGVAR ":" NUMBER STRINGVAR
lambdaParams ::= ('('( ("]")* STRINGVAR ':'?)*')')

// fields

FieldsDeclaration ::= Fields (ModifierV? BLOCK_COMMENT* Type DefMethodName)*

// methods

MethodDeclaration ::= MethodHead LBRACKET InstructionHead InstructionBody* LocVarTableDeclaration? StackMapTableDeclaration? RBRACKET
{mixin="JavaByteCodeLanguage.autoGenerated.psi.impl.JavaByteCodeNamedElementImpl"
 implements="JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeNamedElement"
 methods=[getName setName getNameIdentifier getPresentation navigate]}

MethodHead ::= ModifierV? BLOCK_COMMENT* Type MethodName ("«" (STRINGVAR ","?)* "»")? // JAVA

MethodName ::=  ('<init>'|'<clinit>'|DefMethodName) params
DefMethodName ::= STRINGVAR {mixin="JavaByteCodeLanguage.autoGenerated.psi.impl.JavaByteCodeNamedElementImpl"
                             implements="JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeNamedElement"
                             methods=[getStringVar getName setName getNameIdentifier getReferences]}
params ::= ('('(Type ','?)*')')?

// instructions (part of method body)

private InstructionHead ::= PC Line Instruction
private InstructionBody ::= NUMBER NUMBER Instr
// TODO {recoverWhile=recoverTillNextInstr}
Instr ::= ((MNEMONIC|LOAD_INSTR) (JType ":" Type                            // put someFQN : someFQN
                                    | "("((JavaOP|NUMBER|STRING)','?)*")"   // LoadString("someString") or ALOAD(5) or ...
                                    | JavaOP)?) //| (PUT_GET_INSTR Type)    // INVOKEVIRTUAL(byte[] { java.lang.Object clone() })
JavaOP ::= ((Type|STRINGVAR)('{'Type MethodName'}')?)+| 'lvIndex=' NUMBER


// tables

LocVarTableDeclaration ::= LocVarTableHead LocVarTableBody* {mixin="JavaByteCodeLanguage.autoGenerated.psi.impl.JavaByteCodeNamedElementImpl"
                                                                               implements="JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeNamedElement"
                                                                               methods=[getName setName getNameIdentifier getPresentation navigate]}

LocVarTableHead ::= LocalVariableTable
private LocVarTableBody ::= "["NUMBER ">" NUMBER ")" "=>" Type (this | STRINGVAR) // NOT RIGHT


private StackMapTableDeclaration ::= StackMapTableHead StackMapTableBody*
private StackMapTableHead ::= StackMapTable
private StackMapTableBody ::= NUMBER Type NUMBER NUMBER

