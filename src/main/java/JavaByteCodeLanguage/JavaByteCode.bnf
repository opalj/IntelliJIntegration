/*
 *  BSD 2-Clause License - see ./LICENSE for details.
 */

{
  parserClass="JavaByteCodeLanguage.autoGenerated.parser.JavaByteCodeParser"
  parserUtilClass="JavaByteCodeLanguage.autoGenerated.parser.JavaByteCodeParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="JavaByteCode"
  psiImplClassSuffix="Impl"
  psiPackage="JavaByteCodeLanguage.autoGenerated.psi"
  psiImplPackage="JavaByteCodeLanguage.autoGenerated.psi.impl"

  elementTypeHolderClass="JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeTypes"
  elementTypeClass="JavaByteCodeLanguage.psi.JavaByteCodeElementType"
  tokenTypeClass="JavaByteCodeLanguage.psi.JavaByteCodeTokenType"
  tokens=[
  COMMENT='regexp://.*|/\*[^*/]*\*/'
  NUMBER ='regexp:[-]?\d+(\.\d*)?([Elfd]\d*)?|[-]?Infinity'
  STRING="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
  MNEMONIC="regexp:AALOAD|AASTORE|ACONST_NULL|ALOAD_0|ALOAD_1|ALOAD_2|ALOAD_3|ALOAD|ANEWARRAY|ARETURN|ARRAYLENGTH|ASTORE_0|ASTORE_1|ASTORE_2|ASTORE_3|ASTORE|ATHROW|BALOAD|BASTORE|BIPUSH|BREAKPOINT|CALOAD|CASTORE|CHECKCAST|D2F|D2I|D2L|DADD|DALOAD|DASTORE|DCMPG|DCMPL|DCONST_0|DCONST_1|DDIV|DLOAD_0|DLOAD_1|DLOAD_2|DLOAD_3|DLOAD|DMUL|DNEG|DREM|DRETURN|DSTORE_0|DSTORE_1|DSTORE_2|DSTORE_3|DSTORE|DSUB|DUP_X1|DUP_X2|DUP2|DUP2_X1|DUP2_X2|DUP|F2D|F2I|F2L|FADD|FALOAD|FASTORE|FCMPG|FCMPL|FCONST_0|FCONST_1|FCONST_2|FDIV|FLOAD_0|FLOAD_1|FLOAD_2|FLOAD_3|FLOAD|FMUL|FNEG|FREM|FRETURN|FSTORE_0|FSTORE_1|FSTORE_2|FSTORE_3|FSTORE|FSUB|GOTO|GOTO_W|I2B|I2C|I2D|I2F|I2L|I2S|IADD|IALOAD|IAND|IASTORE|ICONST_M1|ICONST_0|ICONST_1|ICONST_2|ICONST_3|ICONST_4|ICONST_5|IDIV|IF_ACMPEQ|IF_ACMPNE|IF_ICMPEQ|IF_ICMPGE|IF_ICMPGT|IF_ICMPLE|IF_ICMPLT|IF_ICMPNE|IFEQ|IFGE|IFGT|IFLE|IFLT|IFNE|IFNONNULL|IFNULL|IINC|ILOAD_0|ILOAD_1|ILOAD_2|ILOAD_3|ILOAD|IMPDEP1|IMPDEP2|IMUL|INEG|INSTANCEOF|INVOKEDYNAMIC|INVOKEINTERFACE|INVOKESPECIAL|INVOKESTATIC|INVOKEVIRTUAL|IOR|IREM|IRETURN|ISHL|ISHR|ISTORE_0|ISTORE_1|ISTORE_2|ISTORE_3|ISTORE|ISUB|IUSHR|IXOR|JSR|JSR_W|L2D|L2F|L2I|LADD|LALOAD|LAND|LASTORE|LCMP|LCONST_0|LCONST_1|LDC_W|LDC2_W|LDC|LDIV|LLOAD_0|LLOAD_1|LLOAD_2|LLOAD_3|LLOAD|LMUL|LNEG|LOOKUPSWITCH|LOR|LREM|LRETURN|LSHL|LSHR|LSTORE_0|LSTORE_1|LSTORE_2|LSTORE_3|LSTORE|LSUB|LUSHR|LXOR|MONITORENTER|MONITOREXIT|MULTIANEWARRAY|NEWARRAY|NEW|NOP|POP|POP2|RETURN|RET|SALOAD|SASTORE|SIPUSH|SWAP|TABLESWITCH|WIDE|GETFIELD|GETSTATIC|GET|PUTFIELD|PUTSTATIC|PUT"
  WHITE_SPACE="regexp:\s+"
  COMMA=","
  DOT="."
  COLON=":"
  SEMICOLON=";"
  SLASH="/"
  AT="@"
  TO="regexp:=>|->"
  EQ="="
  SWITCH="⤼"
  LBRACKET="regexp:\(|\{|\[|[«]"
  RBRACKET="regexp:\)|\}|\]|[»]"
  JAVATYPEHEAD='regexp:class|enum|interface'
  EXTENDS='extends'
  IMPLEMENTS='implements'
  THROWS='throws'
  CASE='case'
  ATTRIBUTES='Attributes'
  FIELDS='Fields'
  METHODS='Methods'
  TABLES='Tables'
  INSTRUCTIONHEAD="regexp:PC\s+Line\s+Instruction"
  LVINDEX = "lvIndex="
  TABLENAME='regexp:LocalVariableTable|StackMapTable|ExceptionTable|LocalVariableTypeTable'
  BOOLS='regexp:true|false'
  PRIMITIVETYPE="regexp:void|boolean|byte|char|short|int|long|float|double"
  MODIFIER="regexp:public|private|protected|default|static|final|abstract|synchronized|native|strictfp|volatile|transient"
  STRINGVAR = "regexp:<?[a-zA-Z$_][a-zA-Z0-9$_<>]*>?"
  ]

  psiImplUtilClass="JavaByteCodeLanguage.psi.impl.JavaByteCodePsiImplUtil"
}
jbcFile ::=  item_

// this item is the complete text output from beginning to end
private item_ ::= Annotation* ClassHead LBRACKET AttributesArea? FieldArea? MethodArea? RBRACKET

// the @ can occur for annotations; Java classes can implement several interfaces, hence the comma at the end
ClassHead ::= ModifierV? (AT?) JAVATYPEHEAD JType (EXTENDS JType)? (IMPLEMENTS (JType(COMMA)?)+)?

// generic stuff

// this rule is used to handle cases were some of our tokens can occur in a (e.g.) FQN
// ... use this where a STRINGVAR can occur (unless that STRINGVAR is unique),
// e.g. someRule ::= STRINGVAR* should become someRule ::= (STRINGVAR | JbcTokens)*
private JbcTokens ::= MNEMONIC | TABLES | ATTRIBUTES | METHODS | FIELDS | JAVATYPEHEAD | INSTRUCTIONHEAD | TABLENAME

// e.g. @Contract (pure = true) or @Contract ("_, null -> null")
Annotation ::= AT JType [LBRACKET
                            (
                                STRING COMMA?
                              | STRINGVAR EQ STRING COMMA?
                              | STRINGVAR EQ BOOLS COMMA?
                              | STRINGVAR EQ JType COMMA?
                              | STRINGVAR EQ NUMBER COMMA?
                              | STRINGVAR EQ LBRACKET ((STRING | BOOLS | JType | NUMBER) COMMA?)* RBRACKET COMMA?
                              | LBRACKET? Annotation RBRACKET? COMMA?
                            )*
                         RBRACKET]

ModifierV ::= MODIFIER*

Type ::= (LambdaType | JType | PRIMITIVETYPE)('[]')*
JType ::= ((STRINGVAR | JbcTokens) DOT)*(STRINGVAR | JbcTokens)
{
 mixin="JavaByteCodeLanguage.psi.impl.JavaByteCodeNamedElementImpl"
 implements="JavaByteCodeLanguage.psi.JavaByteCodeNamedElement"
 methods=[getJavaType getName getNameIdentifier getReferences]
}

// lambda.InnerVsLambdaThis$<init>()V:5$Lambda{ lambda.InnerVsLambdaThis$<init>()V:5$Lambda $newInstance(lambda.InnerVsLambdaThis) }
LambdaType ::= ((STRINGVAR | JbcTokens) DOT)*(STRINGVAR | JbcTokens) lambdaParams (STRINGVAR | JbcTokens) COLON* NUMBER (STRINGVAR | JbcTokens)
lambdaParams ::= (LBRACKET( ("]")* (STRINGVAR | JbcTokens) COLON*)*RBRACKET)

// attributes

AttributesArea ::= ATTRIBUTES LBRACKET InnerTable? RBRACKET

InnerTable ::= STRINGVAR LBRACKET
                    (Type LBRACKET ModifierV (AT?) JAVATYPEHEAD? STRINGVAR RBRACKET)*
               RBRACKET

// fields

FieldArea ::= FIELDS LBRACKET FieldsDeclaration* RBRACKET

FieldsDeclaration ::= ModifierV? Type DefMethodName
{
 mixin="JavaByteCodeLanguage.psi.impl.JavaByteCodeNamedElementImpl"
 implements="JavaByteCodeLanguage.psi.JavaByteCodeNamedElement"
 methods=[getName getNameIdentifier getPresentation navigate]
}

// methods

MethodArea ::= METHODS LBRACKET MethodDeclaration* RBRACKET

MethodDeclaration ::= Annotation* MethodHead LBRACKET
        (INSTRUCTIONHEAD
         InstructionBody*   // method body is optional (in case of abstract methods)
         TableArea?)*
        RBRACKET
{
 mixin="JavaByteCodeLanguage.psi.impl.JavaByteCodeNamedElementImpl"
 implements="JavaByteCodeLanguage.psi.JavaByteCodeNamedElement"
 methods=[getName getNameIdentifier getPresentation navigate]
}

// e.g. public void someMethod(int) throws SomeException
MethodHead ::= ModifierV? Type MethodName

MethodName ::=  DefMethodName params exceptionList*
DefMethodName ::= STRINGVAR
{
 mixin="JavaByteCodeLanguage.psi.impl.JavaByteCodeNamedElementImpl"
 implements="JavaByteCodeLanguage.psi.JavaByteCodeNamedElement"
 methods=[getStringVar getName getNameIdentifier getReferences]
}
params ::= (LBRACKET(Annotation* Type COMMA?)*RBRACKET)?
private exceptionList ::= THROWS (JType COMMA?)*

// instructions (part of method body)

InstructionBody ::= PcNumber LineNumber Instr
PcNumber ::= NUMBER
LineNumber ::= NUMBER
Instr ::= (MNEMONIC (       LBRACKET JType COLON Type RBRACKET                       // e.g. PUT(someFQN : someFQN)
                          | LBRACKET NUMBER RBRACKET                                 // e.g. GOTO(5)
                          | LBRACKET STRING RBRACKET                                 // e.g. LDC("someString")
                          | LBRACKET ((JavaOP|NUMBER|STRING)COMMA?)* RBRACKET        // e.g. INVOKEVIRTUAL(byte[] { java.lang.Object clone() })
                          // TABLESWITCH
                          | LBRACKET NUMBER TO NUMBER SEMICOLON
                                     (NUMBER SWITCH NUMBER COMMA?)* SEMICOLON?
                                     MODIFIER SWITCH NUMBER
                            RBRACKET
                            // LOOKUPSWITCH(default:34[(case:-127,31)(case:128,26)])
                          | LBRACKET MODIFIER COLON NUMBER
                                LBRACKET
                                  (LBRACKET CASE COLON NUMBER COMMA NUMBER RBRACKET)*
                                RBRACKET
                            RBRACKET)?)
                         // | LBRACKET JavaOP RBRACKET)?)



JavaOP ::= "lvIndex=" NUMBER | ((Type| STRINGVAR | JbcTokens)(LBRACKET Type MethodName RBRACKET)?)+


// tables

TableArea ::= TABLES LBRACKET
                  ExceptionTableDeclaration?
                  LocVarTableDeclaration?
                  LocVarTypeTableDeclaration?
                  StackMapTableDeclaration?
              RBRACKET

// exception table
ExceptionTableDeclaration ::= TABLENAME LBRACKET ExceptionTableBody* RBRACKET
{
 mixin="JavaByteCodeLanguage.psi.impl.JavaByteCodeNamedElementImpl"
 implements="JavaByteCodeLanguage.psi.JavaByteCodeNamedElement"
 methods=[getName getNameIdentifier getPresentation navigate]
}
ExceptionTableBody ::= "try" LBRACKET NUMBER COMMA NUMBER RBRACKET "catch" NUMBER (Type|STRINGVAR)


// local variable table
LocVarTableDeclaration ::= TABLENAME LBRACKET LocVarTableBody* RBRACKET
{
 mixin="JavaByteCodeLanguage.psi.impl.JavaByteCodeNamedElementImpl"
 implements="JavaByteCodeLanguage.psi.JavaByteCodeNamedElement"
 methods=[getName getNameIdentifier getPresentation navigate]
}
private LocVarTableBody ::= "pc" EQ LBRACKET NUMBER TO NUMBER RBRACKET SLASH "lv" EQ NUMBER TO Type (this | STRINGVAR | MODIFIER) // NOT RIGHT


// stack map table
StackMapTableDeclaration ::= TABLENAME LBRACKET StackMapTableBody* RBRACKET
{
 mixin="JavaByteCodeLanguage.psi.impl.JavaByteCodeNamedElementImpl"
 implements="JavaByteCodeLanguage.psi.JavaByteCodeNamedElement"
 methods=[getName getNameIdentifier getPresentation navigate]
}
private StackMapTableBody ::= NUMBER Type NUMBER NUMBER
    [("Locals:"? (Type COMMA?)*)?
     SEMICOLON?
     ("Stack:"? ((((STRINGVAR LBRACKET NUMBER RBRACKET|Type)) COMMA?)*))?]


// local variable type table
LocVarTypeTableDeclaration ::= TABLENAME LBRACKET LocVarTypeTableBody* RBRACKET
{
 mixin="JavaByteCodeLanguage.psi.impl.JavaByteCodeNamedElementImpl"
 implements="JavaByteCodeLanguage.psi.JavaByteCodeNamedElement"
 methods=[getName getNameIdentifier getPresentation navigate]
}
// pc=[57 => 72) / lv=6 => psiType: Ljava/lang/Class<+Lcom/intellij/psi/PsiElement>;
LocVarTypeTableBody ::= "pc" EQ LBRACKET NUMBER TO NUMBER RBRACKET  // pc=[57 => 72)
                        SLASH "lv" EQ NUMBER TO STRINGVAR COLON     // / lv=6 => psiType:
                        ((STRINGVAR SLASH?)* SEMICOLON)*            // Ljava/lang/Class<+Lcom/intellij/psi/PsiElement>;
