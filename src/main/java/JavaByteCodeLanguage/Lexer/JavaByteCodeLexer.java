/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package JavaByteCodeLanguage;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static JavaByteCodeLanguage.psi.JavaByteCodeTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>JavaByteCodeLexer.flex</tt>
 */
public class JavaByteCodeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0, 0
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
          "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
          "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
          "\11\0\1\2\4\1\22\0\1\2\1\0\1\10\1\0\1\72\2\0\1\6\1\42\1\43\2\0\1\73\1\4\1"+
                  "\74\1\3\12\5\1\56\1\0\1\44\1\41\1\40\2\0\1\11\1\62\1\12\1\22\1\24\1\27\1\34"+
                  "\1\36\1\25\1\62\1\31\1\21\1\26\1\14\1\13\1\32\1\33\1\23\1\15\1\16\1\20\1\30"+
                  "\1\37\1\62\1\35\1\62\1\42\1\7\1\43\1\0\1\17\1\0\1\60\1\64\1\45\1\61\1\55\1"+
                  "\71\1\54\1\66\1\47\2\62\1\46\1\76\1\50\1\57\1\52\1\62\1\67\1\70\1\51\1\53"+
                  "\1\63\1\62\1\75\1\65\1\62\1\42\1\0\1\43\7\0\1\1\32\0\1\2\12\0\1\42\17\0\1"+
                  "\43\304\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\1\0\1\1\1\2\2\1\1\3\3\1\13\4\1\5"+
                  "\1\1\1\6\1\7\1\1\15\4\1\10\1\11\1\12"+
                  "\1\0\1\13\1\0\1\14\2\0\23\4\1\15\1\4"+
                  "\2\0\31\4\1\16\20\4\2\0\3\4\1\17\26\4"+
                  "\1\20\13\4\1\0\2\4\1\21\1\0\1\22\14\4"+
                  "\1\16\3\4\1\23\4\4\1\16\4\4\1\0\1\24"+
                  "\11\4\1\25\12\4\1\26\1\27\1\4\1\30\21\4"+
                  "\1\31\31\4\1\32\2\4\1\33\7\4\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\77\0\176\0\275\0\374\0\374\0\u013b\0\u017a"+
                  "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
                  "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\77\0\u04ad\0\77\0\77"+
                  "\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5"+
                  "\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\77\0\77"+
                  "\0\u085e\0\u013b\0\77\0\u089d\0\77\0\u01b9\0\u08dc\0\u091b"+
                  "\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13"+
                  "\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b"+
                  "\0\u0d4a\0\u0d89\0\u0276\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4"+
                  "\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc"+
                  "\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4"+
                  "\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u0276"+
                  "\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665"+
                  "\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d"+
                  "\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u0276\0\u19d7\0\u1a16"+
                  "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e"+
                  "\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06"+
                  "\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u0276\0\u1f41\0\u1f80\0\u1fbf"+
                  "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7"+
                  "\0\u21f6\0\u2235\0\u2274\0\u0276\0\u22b3\0\u22b3\0\u22f2\0\u2331"+
                  "\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529"+
                  "\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u1f80\0\u26e2"+
                  "\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da"+
                  "\0\u2919\0\u0276\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93"+
                  "\0\u2ad2\0\u2b11\0\u2b50\0\u0276\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c"+
                  "\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u0276\0\77"+
                  "\0\u2e05\0\u0276\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f"+
                  "\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177"+
                  "\0\u31b6\0\u31f5\0\u3234\0\u0276\0\u3273\0\u32b2\0\u32f1\0\u3330"+
                  "\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528"+
                  "\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720"+
                  "\0\u375f\0\u379e\0\u37dd\0\u381c\0\u385b\0\u0276\0\u389a\0\u38d9"+
                  "\0\u0276\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\u3a92"+
                  "\0\u0276";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
                  "\1\12\1\13\1\14\1\15\4\14\1\16\1\17\1\20"+
                  "\1\14\1\21\1\14\1\22\2\14\1\23\1\14\1\24"+
                  "\3\14\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
                  "\1\34\1\14\1\35\1\36\1\14\1\37\1\40\1\2"+
                  "\1\14\1\41\1\42\1\14\1\43\1\44\3\14\1\45"+
                  "\1\46\1\14\1\47\1\50\2\14\100\0\2\3\77\0"+
                  "\1\51\100\0\1\6\71\0\6\52\1\53\1\54\67\52"+
                  "\50\0\1\55\26\0\7\56\1\57\1\53\66\56\5\0"+
                  "\1\14\3\0\1\60\1\61\2\14\1\62\3\14\1\63"+
                  "\1\14\1\64\14\14\5\0\11\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\25\14\1\65\1\14\5\0"+
                  "\11\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\27\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\2\14\1\66\10\14\1\67\13\14\5\0"+
                  "\11\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\12\14\1\20\14\14\5\0\2\14\1\70\6\14\1\0"+
                  "\1\71\13\14\2\0\2\14\5\0\1\14\3\0\7\14"+
                  "\1\66\2\14\1\20\14\14\5\0\11\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\13\14\1\72\13\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\1\14\1\73\1\14\1\74\1\75\3\14\1\76"+
                  "\1\14\1\20\1\14\1\77\1\14\1\100\10\14\5\0"+
                  "\3\14\1\101\5\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\12\14\1\20\14\14\5\0\2\14\1\102"+
                  "\6\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\1\14\1\103\25\14\5\0\11\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\2\14\1\104\24\14\5\0"+
                  "\11\14\1\0\14\14\2\0\2\14\40\0\1\25\103\0"+
                  "\1\105\1\0\1\106\34\0\1\14\3\0\27\14\5\0"+
                  "\1\14\1\107\7\14\1\0\7\14\1\110\4\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\11\14\1\0"+
                  "\1\111\13\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\3\14\1\112\5\14\1\0\14\14\2\0\1\14"+
                  "\1\113\5\0\1\14\3\0\27\14\5\0\11\14\1\0"+
                  "\7\14\1\114\4\14\2\0\2\14\5\0\1\14\3\0"+
                  "\27\14\5\0\6\14\1\115\2\14\1\0\10\14\1\116"+
                  "\3\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\10\14\1\117\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\27\14\5\0\11\14\1\0\14\14\2\0\1\120"+
                  "\1\14\5\0\1\14\3\0\27\14\5\0\11\14\1\0"+
                  "\5\14\1\121\6\14\2\0\2\14\5\0\1\14\3\0"+
                  "\27\14\5\0\10\14\1\122\1\0\1\123\13\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\11\14\1\0"+
                  "\1\124\13\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\11\14\1\0\1\125\5\14\1\126\5\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\4\14\1\127"+
                  "\4\14\1\0\7\14\1\130\4\14\2\0\2\14\5\0"+
                  "\1\14\3\0\27\14\5\0\1\14\1\131\1\132\6\14"+
                  "\1\0\14\14\2\0\2\14\1\51\1\0\75\51\1\52"+
                  "\1\0\75\52\1\56\1\0\75\56\5\0\1\14\3\0"+
                  "\1\14\1\61\2\14\1\62\3\14\1\63\16\14\5\0"+
                  "\11\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\2\14\1\133\24\14\5\0\11\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\5\14\1\134\21\14\5\0"+
                  "\11\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\2\14\1\135\24\14\5\0\11\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\12\14\1\136\1\72\13\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\13\14\1\137\13\14\5\0\11\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\21\14\1\140\5\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\26\14\1\140\5\0\11\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\3\14\1\141"+
                  "\5\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\27\14\5\0\1\142\10\14\1\0\1\14\1\143\12\14"+
                  "\2\0\2\14\5\0\1\14\3\0\5\14\1\144\21\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\2\14\1\145\24\14\5\0\11\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\17\14\1\146\7\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\5\14\1\147\21\14\5\0\11\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\2\14\1\150\24\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\3\14\1\151\23\14\5\0\11\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\3\14\1\152\2\14"+
                  "\1\153\1\14\1\154\2\14\1\155\7\14\1\154\3\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\27\14\5\0\11\14\1\0\11\14\1\156\2\14"+
                  "\2\0\2\14\5\0\1\14\3\0\27\14\5\0\10\14"+
                  "\1\157\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\5\14\1\160\21\14\5\0\11\14\1\0\14\14\2\0"+
                  "\2\14\46\0\1\161\100\0\1\162\33\0\1\14\3\0"+
                  "\27\14\5\0\11\14\1\0\1\14\1\163\12\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\11\14\1\0"+
                  "\1\14\1\164\12\14\2\0\2\14\5\0\1\14\3\0"+
                  "\27\14\5\0\3\14\1\165\5\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\4\14\1\166"+
                  "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\27\14\5\0\5\14\1\167\3\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\2\14\1\170"+
                  "\6\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\27\14\5\0\4\14\1\171\4\14\1\0\5\14\1\172"+
                  "\6\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\2\14\1\173\6\14\1\0\1\174\13\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\4\14\1\171\4\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\4\14\1\175\4\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\11\14\1\0\11\14"+
                  "\1\176\2\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\11\14\1\0\12\14\1\177\1\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\6\14\1\200\2\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\2\14\1\201\6\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\11\14\1\0\1\202"+
                  "\13\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\4\14\1\203\4\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\27\14\5\0\11\14\1\0\1\14\1\204"+
                  "\12\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\11\14\1\0\1\205\13\14\2\0\2\14\5\0\1\14"+
                  "\3\0\27\14\5\0\11\14\1\0\1\206\13\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\3\14\1\207"+
                  "\5\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\3\14\1\210\23\14\5\0\11\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\2\14\1\211\24\14\5\0"+
                  "\11\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\1\212\26\14\5\0\11\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\1\213\26\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\1\14\1\214"+
                  "\25\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\27\14\5\0\10\14\1\215\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\27\14\5\0\11\14"+
                  "\1\0\1\14\1\216\12\14\2\0\2\14\5\0\1\14"+
                  "\3\0\27\14\5\0\11\14\1\0\2\14\1\217\11\14"+
                  "\2\0\2\14\5\0\1\14\3\0\7\14\1\220\17\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\3\14\1\221\23\14\5\0\11\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\2\14\1\222\24\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\2\14\1\223\24\14\5\0\11\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\1\224\26\14\5\0"+
                  "\11\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\1\14\1\140\25\14\5\0\11\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\13\14\1\140\13\14\5\0"+
                  "\11\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\1\225\13\14\1\226\12\14\5\0\11\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\5\14\1\140\5\14"+
                  "\1\140\13\14\5\0\11\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\22\14\1\140\4\14\5\0\11\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\4\14\1\227\4\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\1\14\1\230\7\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\2\14"+
                  "\1\140\24\14\5\0\11\14\1\0\14\14\2\0\2\14"+
                  "\47\0\1\106\76\0\1\231\34\0\1\14\3\0\27\14"+
                  "\5\0\11\14\1\0\11\14\1\232\2\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\11\14\1\0\10\14"+
                  "\1\166\3\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\7\14\1\166\1\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\1\14\1\233\7\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\11\14\1\0\11\14\1\234\2\14\2\0\2\14"+
                  "\1\235\1\0\3\235\1\171\3\235\27\171\5\235\11\171"+
                  "\1\236\14\171\2\235\2\171\5\0\1\14\3\0\27\14"+
                  "\5\0\1\14\1\237\7\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\11\14\1\0\4\14"+
                  "\1\240\7\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\4\14\1\241\4\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\10\14\1\242\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\4\14\1\243\4\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\27\14\5\0\11\14\1\0\1\14\1\244"+
                  "\12\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\11\14\1\0\5\14\1\245\6\14\2\0\2\14\5\0"+
                  "\1\14\3\0\27\14\5\0\11\14\1\0\2\14\1\166"+
                  "\11\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\1\14\1\246\7\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\27\14\5\0\10\14\1\166\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\27\14\5\0\4\14"+
                  "\1\247\4\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\27\14\5\0\11\14\1\0\10\14\1\112\3\14"+
                  "\2\0\2\14\5\0\1\14\3\0\27\14\5\0\11\14"+
                  "\1\0\1\14\1\112\12\14\2\0\2\14\5\0\1\14"+
                  "\3\0\27\14\5\0\11\14\1\0\1\14\1\250\12\14"+
                  "\2\0\2\14\5\0\1\14\3\0\4\14\1\251\22\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\12\14\1\252\14\14\5\0\11\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\11\14\1\253\15\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\24\14\1\254\2\14\5\0\11\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\20\14\1\255\6\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\27\14\5\0\1\14\1\256\7\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\6\257\1\14\20\257"+
                  "\5\0\11\257\1\0\13\257\1\14\2\0\2\257\5\0"+
                  "\1\14\3\0\12\14\1\260\14\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\4\14\1\261"+
                  "\22\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\20\14\1\262\6\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\12\14\1\263"+
                  "\14\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\11\14\1\264\15\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\1\14\1\265"+
                  "\25\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\1\14\1\266\25\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\11\14\1\0\10\14\1\267\3\14\2\0\2\14\5\0"+
                  "\1\14\3\0\27\14\5\0\11\14\1\0\2\14\1\270"+
                  "\11\14\2\0\2\14\51\0\1\271\32\0\1\14\3\0"+
                  "\27\14\5\0\11\14\1\0\11\14\1\272\2\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\10\14\1\273"+
                  "\1\0\14\14\2\0\2\14\1\235\1\0\54\235\1\236"+
                  "\20\235\5\0\1\14\3\0\27\14\5\0\2\14\1\274"+
                  "\6\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\27\14\5\0\11\14\1\0\1\14\1\275\12\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\10\14\1\276"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\3\14\1\277\5\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\11\14\1\0\10\14"+
                  "\1\300\3\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\6\14\1\301\2\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\1\14\1\203\7\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\10\14\1\302\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\27\14\5\0\2\14\1\303\6\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\1\14\1\304\7\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\5\14\1\305\21\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\13\14\1\253"+
                  "\13\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\6\14\1\306\20\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\10\14\1\307"+
                  "\16\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\1\14\1\310\25\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\17\14\1\311"+
                  "\7\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\3\14\1\140\23\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\5\14\1\264"+
                  "\21\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\13\14\1\312\13\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\13\14\1\264"+
                  "\13\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\6\14\1\313\20\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\15\14\1\314"+
                  "\11\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\15\14\1\315\11\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\6\14\1\316\2\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\27\14\5\0\11\14\1\0\11\14\1\317"+
                  "\2\14\2\0\2\14\40\0\1\320\43\0\1\14\3\0"+
                  "\27\14\5\0\11\14\1\0\14\14\2\0\1\14\1\321"+
                  "\5\0\1\14\3\0\27\14\5\0\1\322\10\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\4\14\1\323\4\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\27\14\5\0\1\324\10\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\27\14\5\0\11\14"+
                  "\1\0\2\14\1\325\11\14\2\0\2\14\5\0\1\14"+
                  "\3\0\27\14\5\0\11\14\1\0\1\14\1\326\12\14"+
                  "\2\0\2\14\5\0\1\14\3\0\27\14\5\0\1\14"+
                  "\1\327\7\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\27\14\5\0\11\14\1\0\1\14\1\330\12\14"+
                  "\2\0\2\14\5\0\1\14\3\0\27\14\5\0\1\304"+
                  "\10\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\6\14\1\331\20\14\5\0\11\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\140\3\0\27\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\13\14\1\332"+
                  "\13\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\1\333\26\14\5\0\11\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\27\14\5\0\11\14"+
                  "\1\0\1\14\1\334\12\14\2\0\2\14\5\0\1\14"+
                  "\3\0\4\14\1\335\12\14\1\336\7\14\5\0\11\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\140\3\0\15\14"+
                  "\1\306\11\14\5\0\11\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\21\14\1\337\5\14\5\0\11\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\21\14"+
                  "\1\340\5\14\5\0\11\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\1\341\10\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\10\14\1\342\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\27\14\5\0\10\14\1\322\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\4\14\1\343"+
                  "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\27\14\5\0\11\14\1\0\11\14\1\344\2\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\1\327\10\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\4\14\1\304\4\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\3\14\1\166\5\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\3\14"+
                  "\1\345\23\14\5\0\11\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\3\14\1\346\23\14\5\0\11\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\4\14"+
                  "\1\347\22\14\5\0\11\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\11\14\1\0\10\14"+
                  "\1\350\3\14\2\0\2\14\5\0\1\14\3\0\5\14"+
                  "\1\351\13\14\1\352\5\14\5\0\11\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\14\14\1\353\12\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\3\14\1\152\7\14\1\155\13\14\5\0\11\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\3\14"+
                  "\1\152\4\14\1\154\2\14\1\155\7\14\1\154\3\14"+
                  "\5\0\11\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\27\14\5\0\4\14\1\354\4\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\27\14\5\0\3\14"+
                  "\1\355\5\14\1\0\14\14\2\0\2\14\5\0\1\14"+
                  "\3\0\27\14\5\0\10\14\1\356\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\7\14\1\357\17\14\5\0"+
                  "\11\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\23\14\1\360\3\14\5\0\11\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\5\14\1\140\21\14\5\0"+
                  "\11\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\27\14\5\0\2\14\1\361\6\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\1\362\26\14\5\0\11\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\13\14"+
                  "\1\363\13\14\5\0\11\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\12\14\1\364\14\14\5\0\11\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\2\14\1\365\6\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\4\14\1\366\4\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"+
                  "\5\0\11\14\1\0\2\14\1\322\11\14\2\0\2\14"+
                  "\5\0\1\14\3\0\10\14\1\367\16\14\5\0\11\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\5\14"+
                  "\1\370\21\14\5\0\11\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\11\14\1\0\1\14"+
                  "\1\371\12\14\2\0\2\14\5\0\1\14\3\0\5\14"+
                  "\1\372\21\14\5\0\11\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\1\14\1\373\25\14\5\0\11\14"+
                  "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\5\14"+
                  "\1\374\21\14\5\0\11\14\1\0\14\14\2\0\2\14"+
                  "\5\0\1\14\3\0\27\14\5\0\11\14\1\0\1\375"+
                  "\13\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\11\14\1\0\11\14\1\376\2\14\2\0\2\14\5\0"+
                  "\1\14\3\0\10\14\1\253\16\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\25\14\1\140"+
                  "\1\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\27\14\5\0\11\14\1\0\5\14\1\377"+
                  "\6\14\2\0\2\14\5\0\1\14\3\0\14\14\1\151"+
                  "\12\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\14\14\1\u0100\12\14\5\0\11\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\7\14\1\u0100"+
                  "\17\14\5\0\11\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\27\14\5\0\3\14\1\u0101\5\14\1\0"+
                  "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\5\0"+
                  "\1\14\1\u0102\7\14\1\0\14\14\2\0\2\14\5\0"+
                  "\1\14\3\0\1\u0103\26\14\5\0\11\14\1\0\14\14"+
                  "\2\0\2\14\5\0\1\14\3\0\27\14\5\0\10\14"+
                  "\1\u0104\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\10\14\1\140\16\14\5\0\11\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\5\14\1\u0105\21\14\5\0"+
                  "\11\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"+
                  "\27\14\5\0\11\14\1\0\1\14\1\u0106\12\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\11\14\1\0"+
                  "\5\14\1\u0107\6\14\2\0\2\14\5\0\1\14\3\0"+
                  "\27\14\5\0\1\14\1\u0108\7\14\1\0\14\14\2\0"+
                  "\2\14\5\0\1\14\3\0\27\14\5\0\10\14\1\u0109"+
                  "\1\0\14\14\2\0\2\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15057];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\1\0\1\11\22\1\1\11\1\1\2\11\16\1\2\11"+
                  "\1\1\1\0\1\11\1\0\1\11\2\0\25\1\2\0"+
                  "\52\1\2\0\46\1\1\0\3\1\1\0\33\1\1\0"+
                  "\26\1\1\11\71\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public JavaByteCodeLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaByteCodeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
          { return BAD_CHARACTER;
          }
          // fall through
          case 29: break;
          case 2:
          { return WHITE_SPACE;
          }
          // fall through
          case 30: break;
          case 3:
          { return NUMBER;
          }
          // fall through
          case 31: break;
          case 4:
          { return STRINGVAR;
          }
          // fall through
          case 32: break;
          case 5:
          { return TO;
          }
          // fall through
          case 33: break;
          case 6:
          { return LBRACKET;
          }
          // fall through
          case 34: break;
          case 7:
          { return RBRACKET;
          }
          // fall through
          case 35: break;
          case 8:
          { return COMMA;
          }
          // fall through
          case 36: break;
          case 9:
          { return DOT;
          }
          // fall through
          case 37: break;
          case 10:
          { return COMMENT;
          }
          // fall through
          case 38: break;
          case 11:
          { return STRING;
          }
          // fall through
          case 39: break;
          case 12:
          { return EOF;
          }
          // fall through
          case 40: break;
          case 13:
          { return PC;
          }
          // fall through
          case 41: break;
          case 14:
          { return INST;
          }
          // fall through
          case 42: break;
          case 15:
          { return PRIMITIVETYPE;
          }
          // fall through
          case 43: break;
          case 16:
          { return LINE;
          }
          // fall through
          case 44: break;
          case 17:
          { return THIS;
          }
          // fall through
          case 45: break;
          case 18:
          { return PUT_GET_INSTR;
          }
          // fall through
          case 46: break;
          case 19:
          { return LOAD_INSTR;
          }
          // fall through
          case 47: break;
          case 20:
          { return CLASS;
          }
          // fall through
          case 48: break;
          case 21:
          { return MODIFIER;
          }
          // fall through
          case 49: break;
          case 22:
          { return FIELDS;
          }
          // fall through
          case 50: break;
          case 23:
          { return CONSTMETHODNAMES;
          }
          // fall through
          case 51: break;
          case 24:
          { return PREMODIFIER;
          }
          // fall through
          case 52: break;
          case 25:
          { return EXTENDS;
          }
          // fall through
          case 53: break;
          case 26:
          { return IMPLEMENTS;
          }
          // fall through
          case 54: break;
          case 27:
          { return INSTRUCTION;
          }
          // fall through
          case 55: break;
          case 28:
          { return LOCALVARIABLETABLE;
          }
          // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
