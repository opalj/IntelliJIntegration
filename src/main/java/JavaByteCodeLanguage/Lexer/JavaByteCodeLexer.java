/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package JavaByteCodeLanguage.Lexer;

import static JavaByteCodeLanguage.psi.JavaByteCodeTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a> 1.7.0 from the
 * specification file <tt>JavaByteCodeLexer.flex</tt>
 */
public class JavaByteCodeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state in
   * the DFA for the lexical state l at the beginning of a line l is of the form l = 2*k, k a non
   * negative integer
   */
  private static final int ZZ_LEXSTATE[] = {0, 0};

  /**
   * Translates characters to character classes Chosen bits are [7, 7, 7] Total runtime size is 1928
   * bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch >> 14] | ((ch >> 7) & 0x7f)] << 7) | (ch & 0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap("\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap("\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] =
      zzUnpackCMap(
          "\11\0\1\2\4\1\22\0\1\2\1\0\1\10\4\0\1\6\5\0\1\4\1\51\1\3\12\5\7\0\1\11\1\50"
              + "\1\12\1\22\1\24\1\27\1\34\1\36\1\25\1\50\1\31\1\21\1\26\1\14\1\13\1\32\1\33"
              + "\1\23\1\15\1\16\1\20\1\30\1\47\1\50\1\35\1\50\1\0\1\7\2\0\1\17\1\0\1\40\1"
              + "\53\1\57\1\41\1\55\1\62\1\46\1\60\1\44\2\50\1\54\1\50\1\45\1\37\1\64\1\50"
              + "\1\43\1\61\1\42\1\63\1\52\2\50\1\56\1\50\12\0\1\1\32\0\1\2\337\0\1\2\177\0"
              + "\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** Translates DFA states to action switch labels. */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
      "\1\0\1\1\1\2\2\1\1\3\3\1\16\4\1\5"
          + "\7\4\1\6\1\3\1\4\1\0\1\7\1\0\1\10"
          + "\2\0\22\4\1\11\25\4\1\12\12\4\1\0\7\4"
          + "\1\13\23\4\1\14\5\4\2\0\14\4\1\12\10\4"
          + "\1\12\2\0\5\4\1\15\4\4\1\0\5\4\3\0"
          + "\6\4\1\16\1\0\1\12\6\4\2\0\2\4\1\0"
          + "\7\4\3\0\2\4\1\0\7\4\1\0\6\4\1\12"
          + "\2\4\1\17\7\4\1\20";

  private static int[] zzUnpackAction() {
    int[] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Translates a state to a row index in the transition table */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
      "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"
          + "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"
          + "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"
          + "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"
          + "\0\324\0\u06a0\0\u013e\0\65\0\u06d5\0\65\0\u01a8\0\u070a"
          + "\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2"
          + "\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a"
          + "\0\u0a8f\0\u0ac4\0\u0247\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd"
          + "\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75"
          + "\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d"
          + "\0\u0247\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090"
          + "\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238"
          + "\0\u126d\0\u12a2\0\u12d7\0\u0247\0\u130c\0\u1341\0\u1376\0\u13ab"
          + "\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553"
          + "\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u0247"
          + "\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e"
          + "\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16"
          + "\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe"
          + "\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66"
          + "\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u0247\0\u1e6f\0\u1ea4\0\u1ed9"
          + "\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081"
          + "\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229"
          + "\0\u0247\0\u225e\0\65\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367"
          + "\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f"
          + "\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682\0\u26b7"
          + "\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f"
          + "\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07"
          + "\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u0247\0\u2b10\0\u2b45\0\u2b7a"
          + "\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u0247";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** The transition table of the DFA */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
      "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"
          + "\1\12\1\13\1\14\1\15\2\14\1\2\1\14\1\16"
          + "\1\17\1\20\1\14\1\21\1\14\1\22\2\14\1\23"
          + "\1\14\1\24\3\14\1\25\1\26\2\14\1\27\4\14"
          + "\1\30\1\31\1\32\1\33\2\14\1\34\1\14\1\35"
          + "\1\36\1\14\1\37\66\0\2\3\65\0\1\40\66\0"
          + "\1\41\64\0\1\6\3\0\6\42\1\0\31\42\1\0"
          + "\13\42\6\43\1\44\1\45\55\43\45\0\1\46\17\0"
          + "\7\47\1\50\1\44\54\47\5\0\1\42\3\0\1\51"
          + "\1\52\2\14\1\53\1\14\1\0\1\14\1\54\1\14"
          + "\1\55\25\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\16\14\1\56\12\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\31\14\1\30\13\14\5\0\1\42"
          + "\3\0\2\14\1\57\3\14\1\0\4\14\1\60\24\14"
          + "\1\30\13\14\5\0\1\42\3\0\6\14\1\0\3\14"
          + "\1\20\13\14\1\61\4\14\1\62\4\14\1\30\13\14"
          + "\5\0\1\42\3\0\6\14\1\0\1\57\2\14\1\20"
          + "\25\14\1\30\13\14\5\0\1\42\3\0\6\14\1\0"
          + "\4\14\1\63\24\14\1\30\13\14\5\0\1\42\3\0"
          + "\1\14\1\64\1\14\1\65\1\66\1\14\1\0\1\14"
          + "\1\67\1\14\1\20\1\14\1\70\1\14\1\71\15\14"
          + "\1\72\3\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\3\14\1\20\25\14\1\30\13\14\5\0\1\42"
          + "\3\0\1\14\1\73\4\14\1\0\31\14\1\30\13\14"
          + "\5\0\1\42\3\0\2\14\1\74\3\14\1\0\31\14"
          + "\1\30\13\14\5\0\1\42\3\0\6\14\1\0\31\14"
          + "\1\30\1\14\1\75\11\14\5\0\1\42\3\0\6\14"
          + "\1\0\17\14\1\76\11\14\1\30\3\14\1\77\7\14"
          + "\5\0\1\42\3\0\6\14\1\0\25\14\1\100\3\14"
          + "\1\30\13\14\11\0\6\30\1\0\45\30\5\0\1\42"
          + "\3\0\6\14\1\0\17\14\1\101\11\14\1\30\13\14"
          + "\5\0\1\42\3\0\6\14\1\0\17\14\1\102\11\14"
          + "\1\30\4\14\1\103\6\14\5\0\1\42\3\0\6\14"
          + "\1\0\17\14\1\104\11\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\31\14\1\30\6\14\1\105\4\14"
          + "\5\0\1\42\3\0\6\14\1\0\22\14\1\106\6\14"
          + "\1\30\6\14\1\107\4\14\5\0\1\42\3\0\6\14"
          + "\1\0\24\14\1\110\4\14\1\30\2\14\1\111\10\14"
          + "\5\0\1\42\3\0\6\14\1\0\23\14\1\112\5\14"
          + "\1\30\11\14\1\113\1\14\1\40\1\0\63\40\5\0"
          + "\1\42\3\0\6\42\1\0\31\42\1\0\13\42\1\43"
          + "\1\0\63\43\1\47\1\0\63\47\5\0\1\42\3\0"
          + "\1\14\1\52\2\14\1\53\1\14\1\0\1\14\1\54"
          + "\27\14\1\30\13\14\5\0\1\42\3\0\2\14\1\114"
          + "\3\14\1\0\31\14\1\30\13\14\5\0\1\42\3\0"
          + "\5\14\1\115\1\0\31\14\1\30\13\14\5\0\1\42"
          + "\3\0\2\14\1\116\3\14\1\0\31\14\1\30\13\14"
          + "\5\0\1\42\3\0\6\14\1\0\3\14\1\117\1\63"
          + "\24\14\1\30\13\14\5\0\1\42\3\0\6\14\1\0"
          + "\4\14\1\120\24\14\1\30\13\14\5\0\1\42\3\0"
          + "\6\14\1\0\12\14\1\121\16\14\1\30\13\14\5\0"
          + "\1\42\3\0\6\14\1\0\27\14\1\121\1\14\1\30"
          + "\13\14\5\0\1\42\3\0\6\14\1\0\20\14\1\122"
          + "\10\14\1\30\5\14\1\123\5\14\5\0\1\42\3\0"
          + "\6\14\1\0\25\14\1\124\3\14\1\30\13\14\5\0"
          + "\1\42\3\0\5\14\1\125\1\0\31\14\1\30\13\14"
          + "\5\0\1\42\3\0\2\14\1\126\3\14\1\0\31\14"
          + "\1\30\13\14\5\0\1\42\3\0\6\14\1\0\10\14"
          + "\1\127\20\14\1\30\13\14\5\0\1\42\3\0\5\14"
          + "\1\130\1\0\31\14\1\30\13\14\5\0\1\42\3\0"
          + "\2\14\1\131\3\14\1\0\31\14\1\30\13\14\5\0"
          + "\1\42\3\0\3\14\1\132\2\14\1\0\31\14\1\30"
          + "\13\14\5\0\1\42\3\0\3\14\1\133\2\14\1\134"
          + "\1\14\1\135\2\14\1\136\7\14\1\135\14\14\1\30"
          + "\13\14\5\0\1\42\3\0\6\14\1\0\31\14\1\30"
          + "\7\14\1\137\3\14\5\0\1\42\3\0\5\14\1\140"
          + "\1\0\31\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\31\14\1\30\7\14\1\141\3\14\5\0\1\42"
          + "\3\0\6\14\1\0\31\14\1\30\11\14\1\142\1\14"
          + "\5\0\1\42\3\0\6\14\1\0\31\14\1\30\10\14"
          + "\1\143\2\14\5\0\1\42\3\0\6\14\1\0\22\14"
          + "\1\144\6\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\24\14\1\145\4\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\17\14\1\146\11\14\1\30\13\14"
          + "\5\0\1\42\3\0\6\14\1\0\22\14\1\147\6\14"
          + "\1\30\13\14\5\0\1\42\3\0\6\14\1\0\25\14"
          + "\1\150\3\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\20\14\1\151\10\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\20\14\1\152\10\14\1\30\13\14"
          + "\5\0\1\42\3\0\6\14\1\0\17\14\1\153\11\14"
          + "\1\30\13\14\5\0\1\42\3\0\6\14\1\0\25\14"
          + "\1\154\3\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\17\14\1\155\11\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\17\14\1\156\4\14\1\157\4\14"
          + "\1\30\13\14\5\0\1\42\3\0\6\14\1\0\31\14"
          + "\1\30\1\14\1\160\11\14\5\0\1\42\3\0\3\14"
          + "\1\161\2\14\1\0\31\14\1\30\13\14\5\0\1\42"
          + "\3\0\2\14\1\162\3\14\1\0\31\14\1\30\13\14"
          + "\5\0\1\42\3\0\1\163\5\14\1\0\31\14\1\30"
          + "\13\14\5\0\1\42\3\0\1\164\5\14\1\0\31\14"
          + "\1\30\13\14\5\0\1\42\3\0\1\14\1\165\4\14"
          + "\1\0\31\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\21\14\1\166\7\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\20\14\1\167\10\14\1\30\13\14"
          + "\5\0\1\42\3\0\6\14\1\0\31\14\1\30\3\14"
          + "\1\170\7\14\5\0\1\42\3\0\6\14\1\0\1\171"
          + "\30\14\1\30\13\14\5\0\1\42\3\0\3\14\1\172"
          + "\2\14\1\0\31\14\1\30\13\14\5\0\1\42\3\0"
          + "\2\14\1\173\3\14\1\0\31\14\1\30\13\14\5\0"
          + "\1\42\3\0\2\14\1\174\3\14\1\0\31\14\1\30"
          + "\13\14\5\0\1\42\3\0\1\175\5\14\1\0\31\14"
          + "\1\30\13\14\5\0\1\42\3\0\1\14\1\121\4\14"
          + "\1\0\31\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\4\14\1\121\24\14\1\30\13\14\11\0\1\176"
          + "\13\0\1\177\44\0\1\42\3\0\5\14\1\121\1\0"
          + "\4\14\1\121\24\14\1\30\13\14\5\0\1\42\3\0"
          + "\6\14\1\0\13\14\1\121\15\14\1\30\13\14\5\0"
          + "\1\42\3\0\6\14\1\0\22\14\1\200\6\14\1\30"
          + "\13\14\5\0\1\42\3\0\2\14\1\121\3\14\1\0"
          + "\31\14\1\30\13\14\5\0\1\42\3\0\6\14\1\0"
          + "\22\14\1\201\6\14\1\30\13\14\5\0\1\42\3\0"
          + "\6\14\1\0\31\14\1\30\1\14\1\202\11\14\5\0"
          + "\1\42\3\0\6\14\1\0\20\14\1\203\10\14\1\30"
          + "\13\14\5\0\1\42\3\0\6\14\1\0\21\14\1\144"
          + "\7\14\1\30\13\14\5\0\1\42\3\0\6\14\1\0"
          + "\31\14\1\30\2\14\1\204\10\14\5\0\1\42\3\0"
          + "\6\14\1\0\31\14\1\30\3\14\1\144\7\14\5\0"
          + "\1\42\3\0\6\14\1\0\26\14\1\144\2\14\1\30"
          + "\13\14\5\0\1\42\3\0\6\14\1\0\23\14\1\144"
          + "\5\14\1\30\13\14\5\0\1\42\3\0\6\14\1\0"
          + "\22\14\1\205\6\14\1\30\13\14\5\0\1\42\3\0"
          + "\6\14\1\0\23\14\1\100\5\14\1\30\13\14\5\0"
          + "\1\42\3\0\6\14\1\0\20\14\1\206\10\14\1\30"
          + "\13\14\5\0\1\42\3\0\6\14\1\0\20\14\1\100"
          + "\10\14\1\30\13\14\5\0\1\42\3\0\6\14\1\0"
          + "\22\14\1\207\6\14\1\30\13\14\5\0\1\42\3\0"
          + "\6\14\1\0\31\14\1\30\1\210\12\14\5\0\1\42"
          + "\3\0\6\14\1\0\31\14\1\30\2\14\1\211\10\14"
          + "\5\0\1\42\3\0\4\14\1\212\1\14\1\0\31\14"
          + "\1\30\13\14\5\0\1\42\3\0\6\14\1\0\3\14"
          + "\1\213\25\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\2\14\1\214\26\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\15\14\1\215\13\14\1\30\13\14"
          + "\5\0\1\42\3\0\6\14\1\0\11\14\1\216\17\14"
          + "\1\30\13\14\5\0\1\42\3\0\4\14\1\217\1\14"
          + "\1\0\31\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\31\14\1\30\2\14\1\220\10\14\5\0\1\42"
          + "\3\0\6\14\1\0\3\14\1\221\25\14\1\30\13\14"
          + "\5\0\1\42\3\0\4\14\1\222\1\14\1\0\31\14"
          + "\1\30\13\14\5\0\1\42\3\0\6\14\1\0\11\14"
          + "\1\223\17\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\3\14\1\224\25\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\2\14\1\225\26\14\1\30\13\14"
          + "\12\0\1\226\64\0\1\227\57\0\1\42\3\0\6\14"
          + "\1\0\23\14\1\230\5\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\23\14\1\231\5\14\1\30\13\14"
          + "\5\0\1\42\3\0\6\14\1\0\31\14\1\30\2\14"
          + "\1\147\10\14\5\0\1\42\3\0\6\14\1\0\31\14"
          + "\1\30\11\14\1\232\1\14\5\0\1\42\3\0\6\14"
          + "\1\0\31\14\1\30\3\14\1\233\7\14\5\0\1\42"
          + "\3\0\6\14\1\0\24\14\1\234\4\14\1\30\13\14"
          + "\5\0\1\42\3\0\6\14\1\0\31\14\1\30\2\14"
          + "\1\235\10\14\5\0\1\42\3\0\6\14\1\0\31\14"
          + "\1\30\3\14\1\236\7\14\5\0\1\42\3\0\6\14"
          + "\1\0\20\14\1\237\10\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\24\14\1\240\4\14\1\30\13\14"
          + "\5\0\1\42\3\0\5\14\1\241\1\0\31\14\1\30"
          + "\13\14\5\0\1\42\3\0\6\14\1\0\4\14\1\214"
          + "\24\14\1\30\13\14\5\0\1\42\3\0\6\14\1\242"
          + "\31\14\1\30\13\14\5\0\1\42\3\0\6\14\1\0"
          + "\1\14\1\243\27\14\1\30\13\14\5\0\1\42\3\0"
          + "\1\14\1\244\4\14\1\0\31\14\1\30\13\14\5\0"
          + "\1\42\3\0\6\14\1\0\22\14\1\245\6\14\1\30"
          + "\13\14\5\0\1\42\3\0\6\14\1\0\10\14\1\246"
          + "\20\14\1\30\13\14\5\0\1\42\3\0\3\14\1\121"
          + "\2\14\1\0\31\14\1\30\13\14\5\0\1\42\3\0"
          + "\5\14\1\225\1\0\31\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\4\14\1\247\24\14\1\30\13\14"
          + "\5\0\1\42\3\0\6\14\1\0\4\14\1\225\24\14"
          + "\1\30\13\14\5\0\1\42\3\0\6\14\1\250\31\14"
          + "\1\30\13\14\26\0\1\251\64\0\1\252\43\0\1\42"
          + "\3\0\6\14\1\0\31\14\1\30\11\14\1\253\1\14"
          + "\5\0\1\42\3\0\6\14\1\0\20\14\1\254\10\14"
          + "\1\30\13\14\5\0\1\42\3\0\6\14\1\0\31\14"
          + "\1\30\2\14\1\255\10\14\5\0\1\42\3\0\6\14"
          + "\1\0\20\14\1\256\10\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\31\14\1\30\5\14\1\235\5\14"
          + "\5\0\1\42\3\0\6\14\1\0\31\14\1\30\5\14"
          + "\1\257\5\14\5\0\1\42\3\0\6\14\1\0\22\14"
          + "\1\260\6\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\31\14\1\30\5\14\1\261\5\14\5\0\1\42"
          + "\3\0\6\14\1\262\31\14\1\30\13\14\5\0\1\263"
          + "\64\0\1\42\3\0\6\14\1\0\4\14\1\264\24\14"
          + "\1\30\13\14\5\0\1\42\3\0\1\265\5\14\1\0"
          + "\31\14\1\30\13\14\5\0\1\42\3\0\6\14\1\0"
          + "\23\14\1\266\5\14\1\30\13\14\5\0\1\42\3\0"
          + "\6\14\1\0\20\14\1\267\10\14\1\30\13\14\5\0"
          + "\1\42\3\0\4\14\1\270\1\14\1\0\10\14\1\271"
          + "\20\14\1\30\13\14\5\0\1\263\20\0\1\242\70\0"
          + "\1\272\64\0\1\273\37\0\1\42\3\0\6\14\1\0"
          + "\31\14\1\30\5\14\1\274\5\14\5\0\1\42\3\0"
          + "\6\14\1\0\31\14\1\30\5\14\1\255\5\14\5\0"
          + "\1\42\3\0\6\14\1\0\22\14\1\235\6\14\1\30"
          + "\13\14\5\0\1\42\3\0\6\14\1\0\25\14\1\144"
          + "\3\14\1\30\13\14\5\0\1\42\3\0\6\14\1\0"
          + "\22\14\1\275\6\14\1\30\13\14\5\0\1\42\3\0"
          + "\6\14\1\0\31\14\1\30\3\14\1\261\7\14\14\0"
          + "\1\276\55\0\1\42\3\0\3\14\1\277\2\14\1\0"
          + "\31\14\1\30\13\14\5\0\1\42\3\0\4\14\1\300"
          + "\1\14\1\0\31\14\1\30\13\14\5\0\1\42\3\0"
          + "\6\14\1\0\24\14\1\301\4\14\1\30\13\14\5\0"
          + "\1\42\3\0\6\14\1\0\23\14\1\302\5\14\1\30"
          + "\13\14\5\0\1\42\3\0\5\14\1\303\1\0\12\14"
          + "\1\304\16\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\5\14\1\305\23\14\1\30\13\14\14\0\1\306"
          + "\7\0\1\307\54\0\1\306\4\0\1\310\2\0\1\307"
          + "\7\0\1\310\35\0\1\42\3\0\6\14\1\0\22\14"
          + "\1\311\6\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\31\14\1\30\3\14\1\312\7\14\20\0\1\313"
          + "\51\0\1\42\3\0\6\14\1\0\14\14\1\314\14\14"
          + "\1\30\13\14\5\0\1\42\3\0\5\14\1\121\1\0"
          + "\31\14\1\30\13\14\5\0\1\42\3\0\6\14\1\0"
          + "\25\14\1\315\3\14\1\30\13\14\5\0\1\42\3\0"
          + "\6\14\1\0\24\14\1\316\4\14\1\30\13\14\5\0"
          + "\1\42\3\0\1\317\5\14\1\0\31\14\1\30\13\14"
          + "\5\0\1\42\3\0\6\14\1\0\4\14\1\320\24\14"
          + "\1\30\13\14\5\0\1\42\3\0\6\14\1\0\3\14"
          + "\1\321\25\14\1\30\13\14\24\0\1\263\73\0\1\263"
          + "\47\0\1\263\5\0\1\263\45\0\1\42\3\0\6\14"
          + "\1\0\24\14\1\322\4\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\21\14\1\235\7\14\1\30\13\14"
          + "\21\0\1\323\50\0\1\42\3\0\5\14\1\324\1\0"
          + "\31\14\1\30\13\14\5\0\1\42\3\0\6\14\1\0"
          + "\26\14\1\121\2\14\1\30\13\14\5\0\1\42\3\0"
          + "\6\14\1\0\20\14\1\325\10\14\1\30\13\14\5\0"
          + "\1\42\3\0\5\14\1\326\1\0\31\14\1\30\13\14"
          + "\5\0\1\42\3\0\1\14\1\327\4\14\1\0\31\14"
          + "\1\30\13\14\5\0\1\42\3\0\5\14\1\330\1\0"
          + "\31\14\1\30\13\14\5\0\1\42\3\0\6\14\1\0"
          + "\17\14\1\331\11\14\1\30\13\14\21\0\1\332\50\0"
          + "\1\42\3\0\6\14\1\0\16\14\1\121\12\14\1\30"
          + "\13\14\5\0\1\42\3\0\6\14\1\0\31\14\1\30"
          + "\1\14\1\333\11\14\5\0\1\42\3\0\6\14\1\0"
          + "\5\14\1\132\23\14\1\30\13\14\5\0\1\42\3\0"
          + "\6\14\1\0\5\14\1\334\23\14\1\30\13\14\5\0"
          + "\1\42\3\0\6\14\1\0\1\334\30\14\1\30\13\14"
          + "\5\0\1\42\3\0\6\14\1\0\25\14\1\335\3\14"
          + "\1\30\13\14\17\0\1\242\52\0\1\42\3\0\6\14"
          + "\1\0\31\14\1\30\2\14\1\336\10\14\5\0\1\42"
          + "\3\0\1\337\5\14\1\0\31\14\1\30\13\14\5\0"
          + "\1\42\3\0\6\14\1\0\31\14\1\30\3\14\1\340"
          + "\7\14\5\0\1\42\3\0\6\14\1\0\1\14\1\121"
          + "\27\14\1\30\13\14\5\0\1\42\3\0\5\14\1\341"
          + "\1\0\31\14\1\30\13\14\5\0\1\42\3\0\6\14"
          + "\1\0\20\14\1\342\10\14\1\30\13\14\5\0\1\42"
          + "\3\0\6\14\1\0\31\14\1\30\1\14\1\343\11\14"
          + "\5\0\1\42\3\0\6\14\1\0\31\14\1\30\2\14"
          + "\1\344\10\14\5\0\1\42\3\0\6\14\1\0\31\14"
          + "\1\30\3\14\1\345\7\14";

  private static int[] zzUnpackTrans() {
    int[] result = new int[11395];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /** ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code> */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
      "\1\0\1\11\40\1\1\0\1\11\1\0\1\11\2\0"
          + "\63\1\1\0\41\1\2\0\26\1\2\0\12\1\1\0"
          + "\5\1\3\0\7\1\1\0\1\11\6\1\2\0\2\1"
          + "\1\0\7\1\3\0\2\1\1\0\7\1\1\0\22\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is the source of the yytext() string
   */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read from input */
  private int zzEndRead;

  /** zzAtBOL == true <=> the scanner is currently at the beginning of a line */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public JavaByteCodeLexer() {
    this((java.io.Reader) null);
  }

  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public JavaByteCodeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0; /* index in packed string  */
    int j = 0; /* index in unpacked array */
    while (i < packed.length()) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value;
      while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * @exception java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }

  /** Returns the current lexical state. */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /** Returns the text matched by the current regular expression. */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }

  /**
   * Returns the character at position <tt>pos</tt> from the matched text.
   *
   * <p>It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead + pos);
  }

  /** Returns the length of the matched text region. */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occured while scanning.
   *
   * <p>In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all
   * fallback rule) this method will only be called with things that "Can't Possibly Happen". If
   * this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength()) zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }

      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL /*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL /*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }
        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            {
              return BAD_CHARACTER;
            }
            // fall through
          case 17:
            break;
          case 2:
            {
              return WHITE_SPACE;
            }
            // fall through
          case 18:
            break;
          case 3:
            {
              return NUMBER;
            }
            // fall through
          case 19:
            break;
          case 4:
            {
              return STRINGVAR;
            }
            // fall through
          case 20:
            break;
          case 5:
            {
              return JAVATYPE;
            }
            // fall through
          case 21:
            break;
          case 6:
            {
              return COMMENT;
            }
            // fall through
          case 22:
            break;
          case 7:
            {
              return STRING;
            }
            // fall through
          case 23:
            break;
          case 8:
            {
              return EOF;
            }
            // fall through
          case 24:
            break;
          case 9:
            {
              return PC;
            }
            // fall through
          case 25:
            break;
          case 10:
            {
              return INST;
            }
            // fall through
          case 26:
            break;
          case 11:
            {
              return PRIMITIVETYPE;
            }
            // fall through
          case 27:
            break;
          case 12:
            {
              return LINE;
            }
            // fall through
          case 28:
            break;
          case 13:
            {
              return MODIFIER;
            }
            // fall through
          case 29:
            break;
          case 14:
            {
              return PREMODIFIER;
            }
            // fall through
          case 30:
            break;
          case 15:
            {
              return INSTRUCTION;
            }
            // fall through
          case 31:
            break;
          case 16:
            {
              return LOCALVARIABLETABLE;
            }
            // fall through
          case 32:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }
}
