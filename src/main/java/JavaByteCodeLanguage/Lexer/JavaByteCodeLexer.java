/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package JavaByteCodeLanguage.Lexer;

import static JavaByteCodeLanguage.psi.JavaByteCodeTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a> 1.7.0 from the
 * specification file <tt>JavaByteCodeLexer.flex</tt>
 */
public class JavaByteCodeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state in
   * the DFA for the lexical state l at the beginning of a line l is of the form l = 2*k, k a non
   * negative integer
   */
  private static final int ZZ_LEXSTATE[] = {0, 0};

  /**
   * Translates characters to character classes Chosen bits are [7, 7, 7] Total runtime size is 1928
   * bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch >> 14] | ((ch >> 7) & 0x7f)] << 7) | (ch & 0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap("\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap("\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] =
      zzUnpackCMap(
          "\11\0\1\2\4\1\22\0\1\2\1\0\1\10\1\0\1\71\2\0\1\6\1\40\1\41\2\0\1\72\1\4\1"
              + "\73\1\3\12\5\1\55\1\0\1\42\1\0\1\50\2\0\1\11\1\61\1\12\1\22\1\24\1\27\1\34"
              + "\1\36\1\25\1\61\1\31\1\21\1\26\1\14\1\13\1\32\1\33\1\23\1\15\1\16\1\20\1\30"
              + "\1\37\1\61\1\35\1\61\1\40\1\7\1\41\1\0\1\17\1\0\1\57\1\63\1\43\1\60\1\54\1"
              + "\70\1\53\1\65\1\45\2\61\1\44\1\75\1\46\1\56\1\51\1\61\1\66\1\67\1\47\1\52"
              + "\1\62\1\61\1\74\1\64\1\61\1\40\1\0\1\41\7\0\1\1\32\0\1\2\12\0\1\40\17\0\1"
              + "\41\304\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** Translates DFA states to action switch labels. */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
      "\1\0\1\1\1\2\2\1\1\3\3\1\13\4\1\5"
          + "\1\6\1\1\15\4\1\7\1\10\1\11\1\0\1\12"
          + "\1\0\1\13\2\0\22\4\1\14\1\4\2\0\31\4"
          + "\1\15\17\4\2\0\3\4\1\16\26\4\1\17\12\4"
          + "\1\0\2\4\1\20\1\0\1\21\14\4\1\15\3\4"
          + "\1\22\4\4\1\15\3\4\1\0\1\23\11\4\1\24"
          + "\12\4\1\25\1\4\1\26\21\4\1\27\31\4\1\30"
          + "\2\4\1\31\7\4\1\32";

  private static int[] zzUnpackAction() {
    int[] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Translates a state to a row index in the transition table */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
      "\0\0\0\76\0\174\0\272\0\370\0\370\0\u0136\0\u0174"
          + "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"
          + "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\76\0\76\0\u049a\0\u04d8"
          + "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"
          + "\0\u0706\0\u0744\0\u0782\0\u07c0\0\76\0\76\0\u07fe\0\u0136"
          + "\0\76\0\u083c\0\76\0\u01b2\0\u087a\0\u08b8\0\u08f6\0\u0934"
          + "\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24"
          + "\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u026c"
          + "\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6"
          + "\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6"
          + "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6"
          + "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u026c\0\u13dc\0\u141a\0\u1458"
          + "\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648"
          + "\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838"
          + "\0\u1876\0\u026c\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea"
          + "\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda"
          + "\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca"
          + "\0\u026c\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c"
          + "\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u026c\0\u212e"
          + "\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0"
          + "\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0"
          + "\0\u250e\0\u1e46\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682"
          + "\0\u26c0\0\u26fe\0\u273c\0\u026c\0\u277a\0\u27b8\0\u27f6\0\u2834"
          + "\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u026c\0\u29a8\0\u29e6"
          + "\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6"
          + "\0\76\0\u2c14\0\u026c\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a"
          + "\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a"
          + "\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u026c\0\u3070\0\u30ae\0\u30ec"
          + "\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc"
          + "\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc"
          + "\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640\0\u026c\0\u367e"
          + "\0\u36bc\0\u026c\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830"
          + "\0\u386e\0\u026c";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** The transition table of the DFA */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
      "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"
          + "\1\12\1\13\1\14\1\15\4\14\1\16\1\17\1\20"
          + "\1\14\1\21\1\14\1\22\2\14\1\23\1\14\1\24"
          + "\3\14\1\25\1\26\1\27\1\30\1\31\1\32\1\14"
          + "\1\33\1\2\1\34\1\14\1\35\1\36\1\2\1\14"
          + "\1\37\1\40\1\14\1\41\1\42\3\14\1\43\1\44"
          + "\1\14\1\45\1\46\2\14\77\0\2\3\76\0\1\47"
          + "\77\0\1\6\70\0\6\50\1\51\1\52\66\50\46\0"
          + "\1\53\27\0\7\54\1\55\1\51\65\54\5\0\1\14"
          + "\3\0\1\56\1\57\2\14\1\60\3\14\1\61\1\14"
          + "\1\62\14\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\25\14\1\63\1\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\2\14"
          + "\1\64\10\14\1\65\13\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\12\14"
          + "\1\20\14\14\3\0\2\14\1\66\2\14\1\0\4\14"
          + "\1\0\1\67\13\14\2\0\2\14\5\0\1\14\3\0"
          + "\7\14\1\64\2\14\1\20\14\14\3\0\5\14\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\13\14\1\70\13\14\3\0\5\14\1\0\4\14\1\0"
          + "\14\14\2\0\2\14\5\0\1\14\3\0\1\14\1\71"
          + "\1\14\1\72\1\73\3\14\1\74\1\14\1\20\1\14"
          + "\1\75\1\14\1\76\10\14\3\0\3\14\1\77\1\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\12\14\1\20\14\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\1\14"
          + "\1\100\25\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\2\14\1\101\24\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\43\0\1\102\1\0\1\103\35\0\1\14\3\0\27\14"
          + "\3\0\1\14\1\104\3\14\1\0\4\14\1\0\7\14"
          + "\1\105\4\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\5\14\1\0\4\14\1\0\1\106\13\14\2\0"
          + "\2\14\5\0\1\14\3\0\27\14\3\0\3\14\1\107"
          + "\1\14\1\0\4\14\1\0\14\14\2\0\1\14\1\110"
          + "\5\0\1\14\3\0\27\14\3\0\5\14\1\0\4\14"
          + "\1\0\7\14\1\111\4\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\1\14\1\112\2\14"
          + "\1\0\10\14\1\113\3\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\3\14\1\114\1\0"
          + "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\5\14\1\0\4\14\1\0\14\14\2\0\1\115\1\14"
          + "\5\0\1\14\3\0\27\14\3\0\5\14\1\0\4\14"
          + "\1\0\5\14\1\116\6\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\3\14\1\117\1\0"
          + "\1\120\13\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\5\14\1\0\4\14\1\0\1\121\13\14\2\0"
          + "\2\14\5\0\1\14\3\0\27\14\3\0\5\14\1\0"
          + "\4\14\1\0\1\122\5\14\1\123\5\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\4\14\1\124\1\0"
          + "\4\14\1\0\7\14\1\125\4\14\2\0\2\14\5\0"
          + "\1\14\3\0\27\14\3\0\1\14\1\126\1\127\2\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\1\47\1\0"
          + "\74\47\1\50\1\0\74\50\1\54\1\0\74\54\5\0"
          + "\1\14\3\0\1\14\1\57\2\14\1\60\3\14\1\61"
          + "\16\14\3\0\5\14\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\2\14\1\130\24\14\3\0"
          + "\5\14\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\5\14\1\131\21\14\3\0\5\14\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\2\14\1\132\24\14\3\0\5\14\1\0\4\14\1\0"
          + "\14\14\2\0\2\14\5\0\1\14\3\0\12\14\1\133"
          + "\1\70\13\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\13\14\1\134\13\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\21\14\1\135\5\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\26\14\1\135\3\0\5\14\1\0\4\14\1\0"
          + "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\3\14\1\136\1\14\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\27\14\3\0\1\137\4\14"
          + "\1\0\4\14\1\0\1\14\1\140\12\14\2\0\2\14"
          + "\5\0\1\14\3\0\5\14\1\141\21\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\2\14\1\142\24\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\17\14"
          + "\1\143\7\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\5\14\1\144\21\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\2\14\1\145\24\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\3\14\1\146\23\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\3\14"
          + "\1\147\2\14\1\150\1\14\1\151\2\14\1\152\7\14"
          + "\1\151\3\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\27\14\3\0\5\14"
          + "\1\0\4\14\1\0\11\14\1\153\2\14\2\0\2\14"
          + "\5\0\1\14\3\0\5\14\1\154\21\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\44\0\1\155"
          + "\77\0\1\156\34\0\1\14\3\0\27\14\3\0\5\14"
          + "\1\0\4\14\1\0\1\14\1\157\12\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\5\14\1\0\4\14"
          + "\1\0\1\14\1\160\12\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\3\14\1\161\1\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\4\14\1\162\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\27\14\3\0\5\14\1\0"
          + "\1\163\3\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\2\14\1\164\2\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\4\14\1\165\1\0\4\14\1\0\5\14\1\166"
          + "\6\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\2\14\1\167\2\14\1\0\4\14\1\0\1\170\13\14"
          + "\2\0\2\14\5\0\1\14\3\0\27\14\3\0\4\14"
          + "\1\165\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\27\14\3\0\4\14\1\171\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\5\14\1\0\4\14\1\0\11\14\1\172\2\14"
          + "\2\0\2\14\5\0\1\14\3\0\27\14\3\0\5\14"
          + "\1\0\4\14\1\0\12\14\1\173\1\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\5\14\1\0\1\14"
          + "\1\174\2\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\2\14\1\175\2\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\5\14\1\0\4\14\1\0\1\176\13\14\2\0"
          + "\2\14\5\0\1\14\3\0\27\14\3\0\4\14\1\177"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\4\14\1\0\1\14"
          + "\1\200\12\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\5\14\1\0\4\14\1\0\1\201\13\14\2\0"
          + "\2\14\5\0\1\14\3\0\27\14\3\0\5\14\1\0"
          + "\4\14\1\0\1\202\13\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\3\14\1\203\1\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\3\14"
          + "\1\204\23\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\2\14\1\205\24\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\1\206\26\14\3\0\5\14\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\1\207\26\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\1\14\1\210\25\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\5\14\1\0\3\14"
          + "\1\211\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\27\14\3\0\5\14\1\0\4\14\1\0\1\14\1\212"
          + "\12\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\5\14\1\0\4\14\1\0\2\14\1\213\11\14\2\0"
          + "\2\14\5\0\1\14\3\0\7\14\1\214\17\14\3\0"
          + "\5\14\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\3\14\1\215\23\14\3\0\5\14\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\2\14\1\216\24\14\3\0\5\14\1\0\4\14\1\0"
          + "\14\14\2\0\2\14\5\0\1\14\3\0\2\14\1\217"
          + "\24\14\3\0\5\14\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\1\220\26\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\1\14\1\135\25\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\13\14"
          + "\1\135\13\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\1\221\13\14\1\222"
          + "\12\14\3\0\5\14\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\5\14\1\135\5\14\1\135"
          + "\13\14\3\0\5\14\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\22\14\1\135\4\14\3\0"
          + "\5\14\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\27\14\3\0\4\14\1\223\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\2\14"
          + "\1\135\24\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\45\0\1\103\75\0\1\224\35\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\4\14\1\0\11\14"
          + "\1\225\2\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\5\14\1\0\4\14\1\0\10\14\1\162\3\14"
          + "\2\0\2\14\5\0\1\14\3\0\27\14\3\0\5\14"
          + "\1\0\2\14\1\162\1\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\1\14\1\226\3\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\4\14\1\0\11\14"
          + "\1\227\2\14\2\0\2\14\1\230\1\0\3\230\1\165"
          + "\3\230\27\165\3\230\5\165\1\230\4\165\1\231\14\165"
          + "\2\230\2\165\5\0\1\14\3\0\27\14\3\0\1\14"
          + "\1\232\3\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\5\14\1\0\4\14"
          + "\1\0\4\14\1\233\7\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\4\14\1\234\1\0\4\14\1\0"
          + "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\5\14\1\0\3\14\1\235\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\4\14\1\236\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\27\14\3\0\5\14\1\0\4\14\1\0\1\14\1\237"
          + "\12\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\5\14\1\0\4\14\1\0\5\14\1\240\6\14\2\0"
          + "\2\14\5\0\1\14\3\0\27\14\3\0\5\14\1\0"
          + "\4\14\1\0\2\14\1\162\11\14\2\0\2\14\5\0"
          + "\1\14\3\0\27\14\3\0\1\14\1\241\3\14\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\27\14\3\0\5\14\1\0\3\14\1\162\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\27\14\3\0\4\14"
          + "\1\242\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\27\14\3\0\5\14\1\0\4\14\1\0"
          + "\10\14\1\107\3\14\2\0\2\14\5\0\1\14\3\0"
          + "\27\14\3\0\5\14\1\0\4\14\1\0\1\14\1\107"
          + "\12\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\5\14\1\0\4\14\1\0\1\14\1\243\12\14\2\0"
          + "\2\14\5\0\1\14\3\0\4\14\1\244\22\14\3\0"
          + "\5\14\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\12\14\1\245\14\14\3\0\5\14\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\11\14\1\246\15\14\3\0\5\14\1\0\4\14\1\0"
          + "\14\14\2\0\2\14\5\0\1\14\3\0\24\14\1\247"
          + "\2\14\3\0\5\14\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\20\14\1\250\6\14\3\0"
          + "\5\14\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\27\14\3\0\1\14\1\251\3\14\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\6\252\1\14\20\252\3\0\5\252\1\0\4\252\1\0"
          + "\13\252\1\14\2\0\2\252\5\0\1\14\3\0\12\14"
          + "\1\253\14\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\4\14\1\254\22\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\20\14\1\255\6\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\12\14\1\256\14\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\11\14"
          + "\1\257\15\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\1\14\1\260\25\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\1\14\1\261\25\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\4\14\1\0\10\14"
          + "\1\262\3\14\2\0\2\14\47\0\1\263\33\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\4\14\1\0\11\14"
          + "\1\264\2\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\5\14\1\0\3\14\1\265\1\0\14\14\2\0"
          + "\2\14\1\230\1\0\53\230\1\231\20\230\5\0\1\14"
          + "\3\0\27\14\3\0\2\14\1\266\2\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\5\14\1\0\4\14\1\0\1\14\1\267\12\14"
          + "\2\0\2\14\5\0\1\14\3\0\27\14\3\0\5\14"
          + "\1\0\3\14\1\270\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\27\14\3\0\3\14\1\271\1\14\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\27\14\3\0\5\14\1\0\4\14\1\0\10\14\1\272"
          + "\3\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\5\14\1\0\1\14\1\273\2\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\27\14\3\0\1\14\1\177"
          + "\3\14\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\27\14\3\0\5\14\1\0\3\14\1\274"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\2\14\1\275\2\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\27\14\3\0\1\14"
          + "\1\276\3\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\5\14\1\277\21\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\13\14\1\246\13\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\6\14"
          + "\1\300\20\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\10\14\1\301\16\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\1\14\1\302\25\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\17\14\1\303\7\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\3\14"
          + "\1\135\23\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\5\14\1\257\21\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\13\14\1\304\13\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\13\14\1\257\13\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\6\14"
          + "\1\305\20\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\15\14\1\306\11\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\15\14\1\307\11\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\1\14\1\310\2\14"
          + "\1\0\14\14\2\0\2\14\50\0\1\311\32\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\1\14\1\312\5\0\1\14\3\0\27\14\3\0"
          + "\1\313\4\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\4\14\1\314\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\27\14\3\0\1\315\4\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\27\14\3\0\5\14"
          + "\1\0\4\14\1\0\2\14\1\316\11\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\5\14\1\0\4\14"
          + "\1\0\1\14\1\317\12\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\1\14\1\320\3\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\5\14\1\0\4\14\1\0\1\14\1\321\12\14"
          + "\2\0\2\14\5\0\1\14\3\0\27\14\3\0\1\276"
          + "\4\14\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\6\14\1\322\20\14\3\0\5\14\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\135\3\0"
          + "\27\14\3\0\5\14\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\13\14\1\323\13\14\3\0"
          + "\5\14\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\1\324\26\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\5\14\1\0\4\14\1\0\1\14\1\325\12\14"
          + "\2\0\2\14\5\0\1\14\3\0\4\14\1\326\12\14"
          + "\1\327\7\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\135\3\0\15\14\1\300\11\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\21\14\1\330\5\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\21\14\1\331\5\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\1\332\4\14\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\27\14\3\0\5\14\1\0"
          + "\3\14\1\333\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\3\14\1\313\1\0"
          + "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\4\14\1\334\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\5\14\1\0\4\14"
          + "\1\0\11\14\1\335\2\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\1\320\4\14\1\0\4\14\1\0"
          + "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\4\14\1\276\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\3\14\1\162\1\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\3\14\1\336\23\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\3\14"
          + "\1\337\23\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\4\14\1\340\22\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\5\14\1\0\4\14"
          + "\1\0\10\14\1\341\3\14\2\0\2\14\5\0\1\14"
          + "\3\0\5\14\1\342\13\14\1\343\5\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\14\14\1\344\12\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\3\14"
          + "\1\147\7\14\1\152\13\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\3\14"
          + "\1\147\4\14\1\151\2\14\1\152\7\14\1\151\3\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\27\14\3\0\4\14\1\345\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\27\14\3\0\3\14\1\346\1\14\1\0\4\14\1\0"
          + "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\5\14\1\0\3\14\1\347\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\7\14\1\350\17\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\23\14\1\351\3\14\3\0\5\14\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\5\14"
          + "\1\135\21\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\27\14\3\0\2\14"
          + "\1\352\2\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\1\353\26\14\3\0\5\14\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\13\14\1\354\13\14\3\0\5\14\1\0\4\14\1\0"
          + "\14\14\2\0\2\14\5\0\1\14\3\0\12\14\1\355"
          + "\14\14\3\0\5\14\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\27\14\3\0\2\14\1\356"
          + "\2\14\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\27\14\3\0\4\14\1\357\1\0\4\14"
          + "\1\0\14\14\2\0\2\14\5\0\1\14\3\0\27\14"
          + "\3\0\5\14\1\0\4\14\1\0\2\14\1\313\11\14"
          + "\2\0\2\14\5\0\1\14\3\0\10\14\1\360\16\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\5\14\1\361\21\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\4\14\1\0\1\14"
          + "\1\362\12\14\2\0\2\14\5\0\1\14\3\0\5\14"
          + "\1\363\21\14\3\0\5\14\1\0\4\14\1\0\14\14"
          + "\2\0\2\14\5\0\1\14\3\0\1\14\1\364\25\14"
          + "\3\0\5\14\1\0\4\14\1\0\14\14\2\0\2\14"
          + "\5\0\1\14\3\0\5\14\1\365\21\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\4\14\1\0\1\366"
          + "\13\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\5\14\1\0\4\14\1\0\11\14\1\367\2\14\2\0"
          + "\2\14\5\0\1\14\3\0\10\14\1\246\16\14\3\0"
          + "\5\14\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\25\14\1\135\1\14\3\0\5\14\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\27\14\3\0\5\14\1\0\4\14\1\0\5\14\1\370"
          + "\6\14\2\0\2\14\5\0\1\14\3\0\14\14\1\146"
          + "\12\14\3\0\5\14\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\14\14\1\371\12\14\3\0"
          + "\5\14\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\7\14\1\371\17\14\3\0\5\14\1\0"
          + "\4\14\1\0\14\14\2\0\2\14\5\0\1\14\3\0"
          + "\27\14\3\0\3\14\1\372\1\14\1\0\4\14\1\0"
          + "\14\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\1\14\1\373\3\14\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\1\374\26\14\3\0\5\14"
          + "\1\0\4\14\1\0\14\14\2\0\2\14\5\0\1\14"
          + "\3\0\27\14\3\0\5\14\1\0\3\14\1\375\1\0"
          + "\14\14\2\0\2\14\5\0\1\14\3\0\10\14\1\135"
          + "\16\14\3\0\5\14\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\5\14\1\376\21\14\3\0"
          + "\5\14\1\0\4\14\1\0\14\14\2\0\2\14\5\0"
          + "\1\14\3\0\27\14\3\0\5\14\1\0\4\14\1\0"
          + "\1\14\1\377\12\14\2\0\2\14\5\0\1\14\3\0"
          + "\27\14\3\0\5\14\1\0\4\14\1\0\5\14\1\u0100"
          + "\6\14\2\0\2\14\5\0\1\14\3\0\27\14\3\0"
          + "\1\14\1\u0101\3\14\1\0\4\14\1\0\14\14\2\0"
          + "\2\14\5\0\1\14\3\0\27\14\3\0\5\14\1\0"
          + "\3\14\1\u0102\1\0\14\14\2\0\2\14";

  private static int[] zzUnpackTrans() {
    int[] result = new int[14508];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /** ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code> */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
      "\1\0\1\11\22\1\2\11\16\1\2\11\1\1\1\0"
          + "\1\11\1\0\1\11\2\0\24\1\2\0\51\1\2\0"
          + "\45\1\1\0\3\1\1\0\32\1\1\0\25\1\1\11"
          + "\71\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is the source of the yytext() string
   */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read from input */
  private int zzEndRead;

  /** zzAtBOL == true <=> the scanner is currently at the beginning of a line */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public JavaByteCodeLexer() {
    this((java.io.Reader) null);
  }

  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public JavaByteCodeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0; /* index in packed string  */
    int j = 0; /* index in unpacked array */
    while (i < packed.length()) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value;
      while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * @exception java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }

  /** Returns the current lexical state. */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /** Returns the text matched by the current regular expression. */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }

  /**
   * Returns the character at position <tt>pos</tt> from the matched text.
   *
   * <p>It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead + pos);
  }

  /** Returns the length of the matched text region. */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occured while scanning.
   *
   * <p>In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all
   * fallback rule) this method will only be called with things that "Can't Possibly Happen". If
   * this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength()) zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }

      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL /*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL /*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }
        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            {
              return BAD_CHARACTER;
            }
            // fall through
          case 27:
            break;
          case 2:
            {
              return WHITE_SPACE;
            }
            // fall through
          case 28:
            break;
          case 3:
            {
              return NUMBER;
            }
            // fall through
          case 29:
            break;
          case 4:
            {
              return STRINGVAR;
            }
            // fall through
          case 30:
            break;
          case 5:
            {
              return LBRACKET;
            }
            // fall through
          case 31:
            break;
          case 6:
            {
              return RBRACKET;
            }
            // fall through
          case 32:
            break;
          case 7:
            {
              return COMMA;
            }
            // fall through
          case 33:
            break;
          case 8:
            {
              return DOT;
            }
            // fall through
          case 34:
            break;
          case 9:
            {
              return COMMENT;
            }
            // fall through
          case 35:
            break;
          case 10:
            {
              return STRING;
            }
            // fall through
          case 36:
            break;
          case 11:
            {
              return EOF;
            }
            // fall through
          case 37:
            break;
          case 12:
            {
              return PC;
            }
            // fall through
          case 38:
            break;
          case 13:
            {
              return INST;
            }
            // fall through
          case 39:
            break;
          case 14:
            {
              return PRIMITIVETYPE;
            }
            // fall through
          case 40:
            break;
          case 15:
            {
              return LINE;
            }
            // fall through
          case 41:
            break;
          case 16:
            {
              return THIS;
            }
            // fall through
          case 42:
            break;
          case 17:
            {
              return PUT_GET_INSTR;
            }
            // fall through
          case 43:
            break;
          case 18:
            {
              return LOAD_INSTR;
            }
            // fall through
          case 44:
            break;
          case 19:
            {
              return CLASS;
            }
            // fall through
          case 45:
            break;
          case 20:
            {
              return MODIFIER;
            }
            // fall through
          case 46:
            break;
          case 21:
            {
              return CONSTMETHODNAMES;
            }
            // fall through
          case 47:
            break;
          case 22:
            {
              return PREMODIFIER;
            }
            // fall through
          case 48:
            break;
          case 23:
            {
              return EXTENDS;
            }
            // fall through
          case 49:
            break;
          case 24:
            {
              return IMPLEMENTS;
            }
            // fall through
          case 50:
            break;
          case 25:
            {
              return INSTRUCTION;
            }
            // fall through
          case 51:
            break;
          case 26:
            {
              return LOCALVARIABLETABLE;
            }
            // fall through
          case 52:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }
}
