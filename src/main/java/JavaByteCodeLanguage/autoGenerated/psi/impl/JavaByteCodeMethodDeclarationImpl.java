// This is a generated file. Not intended for manual editing.
package JavaByteCodeLanguage.autoGenerated.psi.impl;

import static JavaByteCodeLanguage.autoGenerated.psi.JavaByteCodeTypes.*;

import JavaByteCodeLanguage.autoGenerated.psi.*;
import JavaByteCodeLanguage.psi.impl.JavaByteCodeNamedElementImpl;
import JavaByteCodeLanguage.psi.impl.JavaByteCodePsiImplUtil;
import com.intellij.lang.ASTNode;
import com.intellij.navigation.ItemPresentation;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiElementVisitor;
import com.intellij.psi.util.PsiTreeUtil;
import java.util.List;
import org.jetbrains.annotations.*;

public class JavaByteCodeMethodDeclarationImpl extends JavaByteCodeNamedElementImpl
    implements JavaByteCodeMethodDeclaration {

  public JavaByteCodeMethodDeclarationImpl(@NotNull ASTNode node) {
    super(node);
  }

  public void accept(@NotNull JavaByteCodeVisitor visitor) {
    visitor.visitMethodDeclaration(this);
  }

  public void accept(@NotNull PsiElementVisitor visitor) {
    if (visitor instanceof JavaByteCodeVisitor) accept((JavaByteCodeVisitor) visitor);
    else super.accept(visitor);
  }

  @Override
  @NotNull
  public List<JavaByteCodeAnnotation> getAnnotationList() {
    return PsiTreeUtil.getChildrenOfTypeAsList(this, JavaByteCodeAnnotation.class);
  }

  @Override
  @NotNull
  public List<JavaByteCodeInstructionBody> getInstructionBodyList() {
    return PsiTreeUtil.getChildrenOfTypeAsList(this, JavaByteCodeInstructionBody.class);
  }

  @Override
  @NotNull
  public JavaByteCodeMethodHead getMethodHead() {
    return findNotNullChildByClass(JavaByteCodeMethodHead.class);
  }

  @Override
  @NotNull
  public List<JavaByteCodeTableArea> getTableAreaList() {
    return PsiTreeUtil.getChildrenOfTypeAsList(this, JavaByteCodeTableArea.class);
  }

  @Override
  @NotNull
  public PsiElement getLbracket() {
    return findNotNullChildByType(LBRACKET);
  }

  @Override
  @NotNull
  public PsiElement getRbracket() {
    return findNotNullChildByType(RBRACKET);
  }

  @Override
  public String getName() {
    return JavaByteCodePsiImplUtil.getName(this);
  }

  @Override
  public PsiElement getNameIdentifier() {
    return JavaByteCodePsiImplUtil.getNameIdentifier(this);
  }

  @Override
  public ItemPresentation getPresentation() {
    return JavaByteCodePsiImplUtil.getPresentation(this);
  }

  @Override
  public void navigate(boolean requestFocus) {
    JavaByteCodePsiImplUtil.navigate(this, requestFocus);
  }
}
