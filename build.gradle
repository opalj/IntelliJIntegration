import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer
import com.github.spotbugs.SpotBugsTask

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.3.12'
    id 'checkstyle'
    id 'pmd'
    id "com.github.spotbugs" version "1.6.6"
    id 'com.github.sherter.google-java-format' version '0.8'
    id 'com.github.johnrengelman.shadow' version '4.0.3'
}

shadowJar {
    transform(AppendingTransformer) {
        resource = 'reference.conf'
    }
}
group 'Kollektiv 23'
version '1.0.4'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url = 'http://maven.teamdev.com/repository/products' }
    maven { url = 'http://perfectjpattern.sourceforge.net/m2repo'}
}


dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    // https://mvnrepository.com/artifact/de.opal-project/*
    compile group: 'de.opal-project', name: 'abstract-interpretation-framework_2.12', version: '2.0.1'
    compile group: 'de.opal-project', name:'bytecode-disassembler_2.12', version: '2.0.1'
    compile group: 'de.opal-project', name: 'bytecode-representation_2.12', version: '2.0.1'

}

intellij {
    version '2018.2.2' // maybe need to be changed to latest eap snapshot
    intellij.updateSinceUntilBuild false //Disables updating since-build attribute in plugin.xml
}
patchPluginXml {
    changeNotes """
      Lots of added functionality. See Readme."""
}

// ================
// Overriding tasks
// ================

// build.dependsOn(check), which means that 'check' will be executed whenever 'build' will be executed
check {
    // googleJavaFormat will report "NO-SOURCE" if everything is properly formatted (-> not harmful in any way, can ignore)
    dependsOn 'googleJavaFormat'
    // dependsOn [checkstyle, pmd and spotbugsMain] per default

    tasks.findByName('checkstyleMain').mustRunAfter('googleJavaFormat')
    tasks.findByName('pmdMain').mustRunAfter('checkstyleMain')
    tasks.findByName('spotbugsMain').mustRunAfter('pmdMain')
}


tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
    ignoreFailures = true
}
tasks.withType(Pmd){
    reports{
        xml.enabled=false
        html.enabled=true
    }
}

checkstyle {
    toolVersion "8.10.1"
    config = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml')
//    maxErrors 20
}
pmd{
    toolVersion = "6.11.0"
    ignoreFailures = true
    ruleSetFiles = files("config/pmd/myRuleSets.xml")

}
runIde {
    maxHeapSize = "2g"
}